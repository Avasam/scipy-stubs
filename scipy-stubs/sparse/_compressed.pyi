from typing_extensions import override

from scipy._typing import Untyped

from ._data import _data_matrix, _minmax_mixin
from ._index import IndexMixin

__all__: list[str] = []

class _cs_matrix(_data_matrix, _minmax_mixin, IndexMixin):
    data: Untyped
    indices: Untyped
    indptr: Untyped
    def __init__(
        self: Untyped,
        arg1: Untyped,
        shape: Untyped | None = None,
        dtype: Untyped | None = None,
        copy: bool = False,
        *,
        maxprint: Untyped | None = None,
    ) -> None: ...
    @override
    def count_nonzero(self, axis: Untyped | None = None) -> int: ...
    def check_format(self, full_check: bool = True) -> Untyped: ...
    @override
    def __eq__(self, other: Untyped, /) -> Untyped: ...  # type: ignore[override]
    @override
    def __ne__(self, other: Untyped, /) -> Untyped: ...  # type: ignore[override]
    @override
    def __lt__(self, other: Untyped, /) -> Untyped: ...
    @override
    def __gt__(self, other: Untyped, /) -> Untyped: ...
    @override
    def __le__(self, other: Untyped, /) -> Untyped: ...
    @override
    def __ge__(self, other: Untyped, /) -> Untyped: ...
    @override
    def multiply(self, other: Untyped) -> Untyped: ...
    @override
    def diagonal(self, k: int = 0) -> Untyped: ...
    @override
    def maximum(self, other: Untyped) -> Untyped: ...
    @override
    def minimum(self, other: Untyped) -> Untyped: ...
    @override
    def sum(self, axis: Untyped | None = None, dtype: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    @override
    def tocoo(self, copy: bool = True) -> Untyped: ...
    @override
    def toarray(self, order: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def eliminate_zeros(self) -> Untyped: ...
    @property
    def has_canonical_format(self) -> bool: ...
    @has_canonical_format.setter
    def has_canonical_format(self, val: bool) -> None: ...
    def sum_duplicates(self) -> Untyped: ...
    @property
    def has_sorted_indices(self) -> bool: ...
    @has_sorted_indices.setter
    def has_sorted_indices(self, val: bool) -> None: ...
    def sorted_indices(self) -> Untyped: ...
    def sort_indices(self) -> None: ...
    def prune(self) -> None: ...
    @override
    def resize(self, *shape: int) -> None: ...  # type: ignore[override]
