# This module is not meant for public use and will be removed in SciPy v2.0.0.
from typing_extensions import deprecated

__all__ = [
    "BPoly",
    "BSpline",
    "NdPPoly",
    "PPoly",
    "RectBivariateSpline",
    "RegularGridInterpolator",
    "interp1d",
    "interp2d",
    "interpn",
    "lagrange",
    "make_interp_spline",
]

# _fitpack2
@deprecated("will be removed in SciPy v2.0.0")
class RectBivariateSpline:
    def __init__(
        self, x: object, y: object, z: object, /, *, bbox: object = ..., kx: object = ..., ky: object = ..., s: object = ...
    ) -> None: ...

# _rgi
@deprecated("will be removed in SciPy v2.0.0")
class RegularGridInterpolator:
    def __init__(
        self,
        points: object,
        values: object,
        method: object = ...,
        bounds_error: object = ...,
        fill_value: object = ...,
        *,
        solver: object = ...,
        solver_args: object = ...,
    ) -> None: ...
    def __call__(self, xi: object, method: object = ..., *, nu: object = ...) -> object: ...

@deprecated("will be removed in SciPy v2.0.0")
def interpn(
    points: object,
    values: object,
    xi: object,
    method: object = ...,
    bounds_error: object = ...,
    fill_value: object = ...,
) -> object: ...

# _interpolate
@deprecated("will be removed in SciPy v2.0.0")
class BPoly:
    def derivative(self, nu: object = ...) -> object: ...
    def antiderivative(self, nu: object = ...) -> object: ...
    def integrate(self, a: object, b: object, extrapolate: object = ...) -> object: ...
    def extend(self, c: object, x: object) -> object: ...
    @classmethod
    def from_power_basis(cls, pp: object, extrapolate: object = ...) -> object: ...
    @classmethod
    def from_derivatives(cls, xi: object, yi: object, orders: object = ..., extrapolate: object = ...) -> object: ...

@deprecated("will be removed in SciPy v2.0.0")
class NdPPoly:
    def __init__(self, c: object, x: object, extrapolate: object = ...) -> None: ...
    @classmethod
    def construct_fast(cls, c: object, x: object, extrapolate: object = ...) -> object: ...
    def __call__(self, x: object, nu: object = ..., extrapolate: object = ...) -> object: ...
    def derivative(self, nu: object) -> object: ...
    def antiderivative(self, nu: object) -> object: ...
    def integrate_1d(self, a: object, b: object, axis: object, extrapolate: object = ...) -> object: ...
    def integrate(self, ranges: object, extrapolate: object = ...) -> object: ...

@deprecated("will be removed in SciPy v2.0.0")
class PPoly:
    def derivative(self, nu: object = ...) -> object: ...
    def antiderivative(self, nu: object = ...) -> object: ...
    def integrate(self, a: object, b: object, extrapolate: object = ...) -> object: ...
    def solve(self, y: object = ..., discontinuity: object = ..., extrapolate: object = ...) -> object: ...
    def roots(self, discontinuity: object = ..., extrapolate: object = ...) -> object: ...
    @classmethod
    def from_spline(cls, tck: object, extrapolate: object = ...) -> object: ...
    @classmethod
    def from_bernstein_basis(cls, bp: object, extrapolate: object = ...) -> object: ...

@deprecated("will be removed in SciPy v2.0.0")
class BSpline:
    def __init__(self, t: object, c: object, k: object, extrapolate: object = ..., axis: object = ...) -> None: ...
    @classmethod
    def construct_fast(cls, t: object, c: object, k: object, extrapolate: object = ..., axis: object = ...) -> object: ...
    @property
    def tck(self) -> object: ...
    @classmethod
    def basis_element(cls, t: object, extrapolate: object = ...) -> object: ...
    @classmethod
    def design_matrix(cls, x: object, t: object, k: object, extrapolate: object = ...) -> object: ...
    def __call__(self, x: object, nu: object = ..., extrapolate: object = ...) -> object: ...
    def derivative(self, nu: object = ...) -> object: ...
    def antiderivative(self, nu: object = ...) -> object: ...
    def integrate(self, a: object, b: object, extrapolate: object = ...) -> object: ...
    @classmethod
    def from_power_basis(cls, pp: object, bc_type: object = ...) -> object: ...
    def insert_knot(self, x: object, m: object = ...) -> object: ...

@deprecated("will be removed in SciPy v2.0.0")
class interp1d:
    def __init__(
        self,
        x: object,
        y: object,
        kind: object = ...,
        axis: object = ...,
        copy: object = ...,
        bounds_error: object = ...,
        fill_value: object = ...,
        assume_sorted: object = ...,
    ) -> None: ...
    @property
    def fill_value(self) -> object: ...
    @fill_value.setter
    def fill_value(self, fill_value: object) -> None: ...

@deprecated("will be removed in SciPy v2.0.0")
class interp2d:
    def __init__(
        self,
        x: object,
        y: object,
        z: object,
        kind: object = ...,
        copy: object = ...,
        bounds_error: object = ...,
        fill_value: object = ...,
    ) -> None: ...

@deprecated("will be removed in SciPy v2.0.0")
def lagrange(x: object, w: object) -> object: ...
@deprecated("will be removed in SciPy v2.0.0")
def make_interp_spline(
    x: object, y: object, k: object = ..., t: object = ..., bc_type: object = ..., axis: object = ..., check_finite: object = ...
) -> object: ...
