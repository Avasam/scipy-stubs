[1mscipy.LowLevelCallable.__getitem__(B[m variable differs from runtime type def (self: Untyped, idx: Untyped) -> Untyped
[1mscipy._lib._boost_utils(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy._lib._boost_utils'
[1mscipy._lib._ccallback.CFFIFuncP(B[m is not present at runtime
[1mscipy._lib._ccallback.CFFIVoidP(B[m is not present at runtime
[1mscipy._lib._ccallback.LowLevelCallable.__getitem__(B[m variable differs from runtime type def (self: Untyped, idx: Untyped) -> Untyped
[1mscipy._lib._ccallback.PyCFuncPtr(B[m cannot be subclassed at runtime, but isn't marked with @final in the stub
[1mscipy._lib._ccallback.__all__(B[m is not present at runtime
[1mscipy._lib._highs_utils(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy._lib._highs_utils'
[1mscipy._lib._pep440.Infinity(B[m is not a type
[1mscipy._lib._pep440.NegativeInfinity(B[m is not a type
[1mscipy._lib._unuran_utils(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy._lib._unuran_utils'
[1mscipy._lib._util.Generator.__init__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy._lib._util.Generator.beta(B[m is not present in stub
[1mscipy._lib._util.Generator.binomial(B[m is not present in stub
[1mscipy._lib._util.Generator.bit_generator(B[m is not present in stub
[1mscipy._lib._util.Generator.bytes(B[m is not present in stub
[1mscipy._lib._util.Generator.chisquare(B[m is not present in stub
[1mscipy._lib._util.Generator.choice(B[m is not present in stub
[1mscipy._lib._util.Generator.dirichlet(B[m is not present in stub
[1mscipy._lib._util.Generator.exponential(B[m is not present in stub
[1mscipy._lib._util.Generator.f(B[m is not present in stub
[1mscipy._lib._util.Generator.gamma(B[m is not present in stub
[1mscipy._lib._util.Generator.geometric(B[m is not present in stub
[1mscipy._lib._util.Generator.gumbel(B[m is not present in stub
[1mscipy._lib._util.Generator.hypergeometric(B[m is not present in stub
[1mscipy._lib._util.Generator.integers(B[m is not present in stub
[1mscipy._lib._util.Generator.laplace(B[m is not present in stub
[1mscipy._lib._util.Generator.logistic(B[m is not present in stub
[1mscipy._lib._util.Generator.lognormal(B[m is not present in stub
[1mscipy._lib._util.Generator.logseries(B[m is not present in stub
[1mscipy._lib._util.Generator.multinomial(B[m is not present in stub
[1mscipy._lib._util.Generator.multivariate_hypergeometric(B[m is not present in stub
[1mscipy._lib._util.Generator.multivariate_normal(B[m is not present in stub
[1mscipy._lib._util.Generator.negative_binomial(B[m is not present in stub
[1mscipy._lib._util.Generator.noncentral_chisquare(B[m is not present in stub
[1mscipy._lib._util.Generator.noncentral_f(B[m is not present in stub
[1mscipy._lib._util.Generator.normal(B[m is not present in stub
[1mscipy._lib._util.Generator.pareto(B[m is not present in stub
[1mscipy._lib._util.Generator.permutation(B[m is not present in stub
[1mscipy._lib._util.Generator.permuted(B[m is not present in stub
[1mscipy._lib._util.Generator.poisson(B[m is not present in stub
[1mscipy._lib._util.Generator.power(B[m is not present in stub
[1mscipy._lib._util.Generator.random(B[m is not present in stub
[1mscipy._lib._util.Generator.rayleigh(B[m is not present in stub
[1mscipy._lib._util.Generator.shuffle(B[m is not present in stub
[1mscipy._lib._util.Generator.spawn(B[m is not present in stub
[1mscipy._lib._util.Generator.standard_cauchy(B[m is not present in stub
[1mscipy._lib._util.Generator.standard_exponential(B[m is not present in stub
[1mscipy._lib._util.Generator.standard_gamma(B[m is not present in stub
[1mscipy._lib._util.Generator.standard_normal(B[m is not present in stub
[1mscipy._lib._util.Generator.standard_t(B[m is not present in stub
[1mscipy._lib._util.Generator.triangular(B[m is not present in stub
[1mscipy._lib._util.Generator.uniform(B[m is not present in stub
[1mscipy._lib._util.Generator.vonmises(B[m is not present in stub
[1mscipy._lib._util.Generator.wald(B[m is not present in stub
[1mscipy._lib._util.Generator.weibull(B[m is not present in stub
[1mscipy._lib._util.Generator.zipf(B[m is not present in stub
[1mscipy._lib._util.SeedType(B[m is not present at runtime
[1mscipy._lib.array_api_compat.__all__(B[m is not present at runtime
[1mscipy._lib.array_api_compat.common.__all__(B[m is not present at runtime
[1mscipy._lib.decorator.ContextManager.__init__(B[m is inconsistent, stub argument "func" differs from runtime argument "g"
[1mscipy.constants.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.constants.codata(B[m is not present in stub
[1mscipy.constants.constants(B[m is not present in stub
[1mscipy.constants.codata.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.constants.codata.ConstantWarning(B[m is not present in stub
[1mscipy.constants.codata.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.constants.codata.c(B[m is not present in stub
[1mscipy.constants.codata.find(B[m is not present in stub
[1mscipy.constants.codata.k(B[m is not present in stub
[1mscipy.constants.codata.physical_constants(B[m is not present in stub
[1mscipy.constants.codata.precision(B[m is not present in stub
[1mscipy.constants.codata.unit(B[m is not present in stub
[1mscipy.constants.codata.value(B[m is not present in stub
[1mscipy.constants.constants.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.constants.constants.Avogadro(B[m is not present in stub
[1mscipy.constants.constants.Boltzmann(B[m is not present in stub
[1mscipy.constants.constants.Btu(B[m is not present in stub
[1mscipy.constants.constants.Btu_IT(B[m is not present in stub
[1mscipy.constants.constants.Btu_th(B[m is not present in stub
[1mscipy.constants.constants.G(B[m is not present in stub
[1mscipy.constants.constants.Julian_year(B[m is not present in stub
[1mscipy.constants.constants.N_A(B[m is not present in stub
[1mscipy.constants.constants.Planck(B[m is not present in stub
[1mscipy.constants.constants.R(B[m is not present in stub
[1mscipy.constants.constants.Rydberg(B[m is not present in stub
[1mscipy.constants.constants.Stefan_Boltzmann(B[m is not present in stub
[1mscipy.constants.constants.Wien(B[m is not present in stub
[1mscipy.constants.constants.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.constants.constants.acre(B[m is not present in stub
[1mscipy.constants.constants.alpha(B[m is not present in stub
[1mscipy.constants.constants.angstrom(B[m is not present in stub
[1mscipy.constants.constants.arcmin(B[m is not present in stub
[1mscipy.constants.constants.arcminute(B[m is not present in stub
[1mscipy.constants.constants.arcsec(B[m is not present in stub
[1mscipy.constants.constants.arcsecond(B[m is not present in stub
[1mscipy.constants.constants.astronomical_unit(B[m is not present in stub
[1mscipy.constants.constants.atm(B[m is not present in stub
[1mscipy.constants.constants.atmosphere(B[m is not present in stub
[1mscipy.constants.constants.atomic_mass(B[m is not present in stub
[1mscipy.constants.constants.atto(B[m is not present in stub
[1mscipy.constants.constants.au(B[m is not present in stub
[1mscipy.constants.constants.bar(B[m is not present in stub
[1mscipy.constants.constants.barrel(B[m is not present in stub
[1mscipy.constants.constants.bbl(B[m is not present in stub
[1mscipy.constants.constants.blob(B[m is not present in stub
[1mscipy.constants.constants.c(B[m is not present in stub
[1mscipy.constants.constants.calorie(B[m is not present in stub
[1mscipy.constants.constants.calorie_IT(B[m is not present in stub
[1mscipy.constants.constants.calorie_th(B[m is not present in stub
[1mscipy.constants.constants.carat(B[m is not present in stub
[1mscipy.constants.constants.centi(B[m is not present in stub
[1mscipy.constants.constants.convert_temperature(B[m is not present in stub
[1mscipy.constants.constants.day(B[m is not present in stub
[1mscipy.constants.constants.deci(B[m is not present in stub
[1mscipy.constants.constants.degree(B[m is not present in stub
[1mscipy.constants.constants.degree_Fahrenheit(B[m is not present in stub
[1mscipy.constants.constants.deka(B[m is not present in stub
[1mscipy.constants.constants.dyn(B[m is not present in stub
[1mscipy.constants.constants.dyne(B[m is not present in stub
[1mscipy.constants.constants.e(B[m is not present in stub
[1mscipy.constants.constants.eV(B[m is not present in stub
[1mscipy.constants.constants.electron_mass(B[m is not present in stub
[1mscipy.constants.constants.electron_volt(B[m is not present in stub
[1mscipy.constants.constants.elementary_charge(B[m is not present in stub
[1mscipy.constants.constants.epsilon_0(B[m is not present in stub
[1mscipy.constants.constants.erg(B[m is not present in stub
[1mscipy.constants.constants.exa(B[m is not present in stub
[1mscipy.constants.constants.exbi(B[m is not present in stub
[1mscipy.constants.constants.femto(B[m is not present in stub
[1mscipy.constants.constants.fermi(B[m is not present in stub
[1mscipy.constants.constants.fine_structure(B[m is not present in stub
[1mscipy.constants.constants.fluid_ounce(B[m is not present in stub
[1mscipy.constants.constants.fluid_ounce_US(B[m is not present in stub
[1mscipy.constants.constants.fluid_ounce_imp(B[m is not present in stub
[1mscipy.constants.constants.foot(B[m is not present in stub
[1mscipy.constants.constants.g(B[m is not present in stub
[1mscipy.constants.constants.gallon(B[m is not present in stub
[1mscipy.constants.constants.gallon_US(B[m is not present in stub
[1mscipy.constants.constants.gallon_imp(B[m is not present in stub
[1mscipy.constants.constants.gas_constant(B[m is not present in stub
[1mscipy.constants.constants.gibi(B[m is not present in stub
[1mscipy.constants.constants.giga(B[m is not present in stub
[1mscipy.constants.constants.golden(B[m is not present in stub
[1mscipy.constants.constants.golden_ratio(B[m is not present in stub
[1mscipy.constants.constants.grain(B[m is not present in stub
[1mscipy.constants.constants.gram(B[m is not present in stub
[1mscipy.constants.constants.gravitational_constant(B[m is not present in stub
[1mscipy.constants.constants.h(B[m is not present in stub
[1mscipy.constants.constants.hbar(B[m is not present in stub
[1mscipy.constants.constants.hectare(B[m is not present in stub
[1mscipy.constants.constants.hecto(B[m is not present in stub
[1mscipy.constants.constants.horsepower(B[m is not present in stub
[1mscipy.constants.constants.hour(B[m is not present in stub
[1mscipy.constants.constants.hp(B[m is not present in stub
[1mscipy.constants.constants.inch(B[m is not present in stub
[1mscipy.constants.constants.k(B[m is not present in stub
[1mscipy.constants.constants.kgf(B[m is not present in stub
[1mscipy.constants.constants.kibi(B[m is not present in stub
[1mscipy.constants.constants.kilo(B[m is not present in stub
[1mscipy.constants.constants.kilogram_force(B[m is not present in stub
[1mscipy.constants.constants.kmh(B[m is not present in stub
[1mscipy.constants.constants.knot(B[m is not present in stub
[1mscipy.constants.constants.lambda2nu(B[m is not present in stub
[1mscipy.constants.constants.lb(B[m is not present in stub
[1mscipy.constants.constants.lbf(B[m is not present in stub
[1mscipy.constants.constants.light_year(B[m is not present in stub
[1mscipy.constants.constants.liter(B[m is not present in stub
[1mscipy.constants.constants.litre(B[m is not present in stub
[1mscipy.constants.constants.long_ton(B[m is not present in stub
[1mscipy.constants.constants.m_e(B[m is not present in stub
[1mscipy.constants.constants.m_n(B[m is not present in stub
[1mscipy.constants.constants.m_p(B[m is not present in stub
[1mscipy.constants.constants.m_u(B[m is not present in stub
[1mscipy.constants.constants.mach(B[m is not present in stub
[1mscipy.constants.constants.mebi(B[m is not present in stub
[1mscipy.constants.constants.mega(B[m is not present in stub
[1mscipy.constants.constants.metric_ton(B[m is not present in stub
[1mscipy.constants.constants.micro(B[m is not present in stub
[1mscipy.constants.constants.micron(B[m is not present in stub
[1mscipy.constants.constants.mil(B[m is not present in stub
[1mscipy.constants.constants.mile(B[m is not present in stub
[1mscipy.constants.constants.milli(B[m is not present in stub
[1mscipy.constants.constants.minute(B[m is not present in stub
[1mscipy.constants.constants.mmHg(B[m is not present in stub
[1mscipy.constants.constants.mph(B[m is not present in stub
[1mscipy.constants.constants.mu_0(B[m is not present in stub
[1mscipy.constants.constants.nano(B[m is not present in stub
[1mscipy.constants.constants.nautical_mile(B[m is not present in stub
[1mscipy.constants.constants.neutron_mass(B[m is not present in stub
[1mscipy.constants.constants.nu2lambda(B[m is not present in stub
[1mscipy.constants.constants.ounce(B[m is not present in stub
[1mscipy.constants.constants.oz(B[m is not present in stub
[1mscipy.constants.constants.parsec(B[m is not present in stub
[1mscipy.constants.constants.pebi(B[m is not present in stub
[1mscipy.constants.constants.peta(B[m is not present in stub
[1mscipy.constants.constants.pi(B[m is not present in stub
[1mscipy.constants.constants.pico(B[m is not present in stub
[1mscipy.constants.constants.point(B[m is not present in stub
[1mscipy.constants.constants.pound(B[m is not present in stub
[1mscipy.constants.constants.pound_force(B[m is not present in stub
[1mscipy.constants.constants.proton_mass(B[m is not present in stub
[1mscipy.constants.constants.psi(B[m is not present in stub
[1mscipy.constants.constants.pt(B[m is not present in stub
[1mscipy.constants.constants.short_ton(B[m is not present in stub
[1mscipy.constants.constants.sigma(B[m is not present in stub
[1mscipy.constants.constants.slinch(B[m is not present in stub
[1mscipy.constants.constants.slug(B[m is not present in stub
[1mscipy.constants.constants.speed_of_light(B[m is not present in stub
[1mscipy.constants.constants.speed_of_sound(B[m is not present in stub
[1mscipy.constants.constants.stone(B[m is not present in stub
[1mscipy.constants.constants.survey_foot(B[m is not present in stub
[1mscipy.constants.constants.survey_mile(B[m is not present in stub
[1mscipy.constants.constants.tebi(B[m is not present in stub
[1mscipy.constants.constants.tera(B[m is not present in stub
[1mscipy.constants.constants.ton_TNT(B[m is not present in stub
[1mscipy.constants.constants.torr(B[m is not present in stub
[1mscipy.constants.constants.troy_ounce(B[m is not present in stub
[1mscipy.constants.constants.troy_pound(B[m is not present in stub
[1mscipy.constants.constants.u(B[m is not present in stub
[1mscipy.constants.constants.week(B[m is not present in stub
[1mscipy.constants.constants.yard(B[m is not present in stub
[1mscipy.constants.constants.year(B[m is not present in stub
[1mscipy.constants.constants.yobi(B[m is not present in stub
[1mscipy.constants.constants.yocto(B[m is not present in stub
[1mscipy.constants.constants.yotta(B[m is not present in stub
[1mscipy.constants.constants.zebi(B[m is not present in stub
[1mscipy.constants.constants.zepto(B[m is not present in stub
[1mscipy.constants.constants.zero_Celsius(B[m is not present in stub
[1mscipy.constants.constants.zetta(B[m is not present in stub
[1mscipy.fftpack.basic.fft(B[m is not present in stub
[1mscipy.fftpack.basic.fft2(B[m is not present in stub
[1mscipy.fftpack.basic.fftn(B[m is not present in stub
[1mscipy.fftpack.basic.ifft(B[m is not present in stub
[1mscipy.fftpack.basic.ifft2(B[m is not present in stub
[1mscipy.fftpack.basic.ifftn(B[m is not present in stub
[1mscipy.fftpack.basic.irfft(B[m is not present in stub
[1mscipy.fftpack.basic.rfft(B[m is not present in stub
[1mscipy.fftpack.helper.fftfreq(B[m is not present in stub
[1mscipy.fftpack.helper.fftshift(B[m is not present in stub
[1mscipy.fftpack.helper.ifftshift(B[m is not present in stub
[1mscipy.fftpack.helper.next_fast_len(B[m is not present in stub
[1mscipy.fftpack.helper.rfftfreq(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.cc_diff(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.convolve(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.cs_diff(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.diff(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.hilbert(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.ihilbert(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.itilbert(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.sc_diff(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.shift(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.ss_diff(B[m is not present in stub
[1mscipy.fftpack.pseudo_diffs.tilbert(B[m is not present in stub
[1mscipy.fftpack.realtransforms.dct(B[m is not present in stub
[1mscipy.fftpack.realtransforms.dctn(B[m is not present in stub
[1mscipy.fftpack.realtransforms.dst(B[m is not present in stub
[1mscipy.fftpack.realtransforms.dstn(B[m is not present in stub
[1mscipy.fftpack.realtransforms.idct(B[m is not present in stub
[1mscipy.fftpack.realtransforms.idctn(B[m is not present in stub
[1mscipy.fftpack.realtransforms.idst(B[m is not present in stub
[1mscipy.fftpack.realtransforms.idstn(B[m is not present in stub
[1mscipy.integrate.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.integrate.dblquad(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-1 = Unpack[()]],)
[1mscipy.integrate.dblquad(B[m is inconsistent, runtime argument "epsabs" is not keyword-only
[1mscipy.integrate.dblquad(B[m is inconsistent, runtime argument "epsrel" is not keyword-only
[1mscipy.integrate.fixed_quad(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-2 = Unpack[()]],)
[1mscipy.integrate.nquad(B[m is inconsistent, runtime argument "full_output" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-2 = Unpack[()]],). This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "col_deriv" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "full_output" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "ml" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "mu" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "rtol" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "atol" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "tcrit" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "h0" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "hmax" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "hmin" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "ixpr" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "mxstep" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "mxhnil" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "mxordn" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "mxords" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "printmessg" is not keyword-only
[1mscipy.integrate.odeint(B[m is inconsistent, runtime argument "tfirst" is not keyword-only
[1mscipy.integrate.quad(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-1 = Unpack[()]],) | (Unpack[_Ts`-1 = Unpack[()]],) | (Unpack[_Ts`-1 = Unpack[()]],) | (Unpack[_Ts`-1 = Unpack[()]],). This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.integrate.quad(B[m is inconsistent, runtime argument "full_output" is not keyword-only
[1mscipy.integrate.quad(B[m is inconsistent, stub does not have argument "epsabs"
[1mscipy.integrate.quad(B[m is inconsistent, stub does not have argument "epsrel"
[1mscipy.integrate.quad(B[m is inconsistent, stub does not have argument "limit"
[1mscipy.integrate.quad(B[m is inconsistent, stub does not have argument "points"
[1mscipy.integrate.quad(B[m is inconsistent, stub does not have argument "weight"
[1mscipy.integrate.quad(B[m is inconsistent, stub does not have argument "wvar"
[1mscipy.integrate.quad(B[m is inconsistent, stub does not have argument "wopts"
[1mscipy.integrate.quad(B[m is inconsistent, runtime argument "maxp1" is not keyword-only
[1mscipy.integrate.quad(B[m is inconsistent, runtime argument "limlst" is not keyword-only
[1mscipy.integrate.quad(B[m is inconsistent, runtime argument "complex_func" is not keyword-only
[1mscipy.integrate.quad(B[m is inconsistent, runtime does not have **kwargs argument "kwds"
[1mscipy.integrate.quad_vec(B[m is inconsistent, runtime argument "cache_size" has a default value of type float, which is incompatible with stub argument type int. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.integrate.quad_vec(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-1 = Unpack[()]],) | (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-3 = Unpack[()]],). This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.integrate.tplquad(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-1 = Unpack[()]],)
[1mscipy.integrate.tplquad(B[m is inconsistent, runtime argument "epsabs" is not keyword-only
[1mscipy.integrate.tplquad(B[m is inconsistent, runtime argument "epsrel" is not keyword-only
[1mscipy.integrate._bvp.BVPResult.y(B[m is not present at runtime
[1mscipy.integrate._bvp.BVPResult.yp(B[m is not present at runtime
[1mscipy.integrate._bvp.EPS(B[m is not present in stub
[1mscipy.integrate._bvp.TERMINATION_MESSAGES(B[m is not present in stub
[1mscipy.integrate._bvp.collocation_fun(B[m is not present in stub
[1mscipy.integrate._bvp.compute_jac_indices(B[m is not present in stub
[1mscipy.integrate._bvp.construct_global_jac(B[m is not present in stub
[1mscipy.integrate._bvp.create_spline(B[m is not present in stub
[1mscipy.integrate._bvp.estimate_bc_jac(B[m is not present in stub
[1mscipy.integrate._bvp.estimate_fun_jac(B[m is not present in stub
[1mscipy.integrate._bvp.estimate_rms_residuals(B[m is not present in stub
[1mscipy.integrate._bvp.modify_mesh(B[m is not present in stub
[1mscipy.integrate._bvp.prepare_sys(B[m is not present in stub
[1mscipy.integrate._bvp.print_iteration_header(B[m is not present in stub
[1mscipy.integrate._bvp.print_iteration_progress(B[m is not present in stub
[1mscipy.integrate._bvp.solve_newton(B[m is not present in stub
[1mscipy.integrate._bvp.stacked_matmul(B[m is not present in stub
[1mscipy.integrate._bvp.wrap_functions(B[m is not present in stub
[1mscipy.integrate._ivp.__all__(B[m is not present at runtime
[1mscipy.integrate._ivp.ivp.prepare_events(B[m is inconsistent, runtime does not have argument "t0"
[1mscipy.integrate._ode.IntegratorBase.scalar(B[m variable differs from runtime type type
[1mscipy.integrate._ode.dop853.success(B[m variable differs from runtime type None
[1mscipy.integrate._ode.dopri5.success(B[m variable differs from runtime type None
[1mscipy.integrate._ode.lsoda.success(B[m variable differs from runtime type None
[1mscipy.integrate._ode.vode.success(B[m variable differs from runtime type None
[1mscipy.integrate._ode.zvode.scalar(B[m variable differs from runtime type type
[1mscipy.integrate._ode.zvode.success(B[m variable differs from runtime type None
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-2 = Unpack[()]],). This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "col_deriv" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "full_output" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "ml" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "mu" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "rtol" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "atol" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "tcrit" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "h0" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "hmax" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "hmin" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "ixpr" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "mxstep" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "mxhnil" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "mxordn" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "mxords" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "printmessg" is not keyword-only
[1mscipy.integrate._odepack_py.odeint(B[m is inconsistent, runtime argument "tfirst" is not keyword-only
[1mscipy.integrate._quad_vec._Bunch.integrals(B[m is not present at runtime
[1mscipy.integrate._quad_vec.quad_vec(B[m is inconsistent, runtime argument "cache_size" has a default value of type float, which is incompatible with stub argument type int. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.integrate._quad_vec.quad_vec(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-1 = Unpack[()]],) | (Unpack[_Ts`-2 = Unpack[()]],) | (Unpack[_Ts`-3 = Unpack[()]],). This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.integrate._quadpack_py._NQuad.full_output(B[m is not present at runtime
[1mscipy.integrate._quadpack_py._NQuad.func(B[m is not present at runtime
[1mscipy.integrate._quadpack_py._NQuad.opts(B[m is not present at runtime
[1mscipy.integrate._quadpack_py._NQuad.ranges(B[m is not present at runtime
[1mscipy.integrate._quadpack_py._OptFunc.opt(B[m is not present at runtime
[1mscipy.integrate._quadpack_py._RangeFunc.range_(B[m is not present at runtime
[1mscipy.integrate._quadpack_py.dblquad(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-1 = Unpack[()]],)
[1mscipy.integrate._quadpack_py.dblquad(B[m is inconsistent, runtime argument "epsabs" is not keyword-only
[1mscipy.integrate._quadpack_py.dblquad(B[m is inconsistent, runtime argument "epsrel" is not keyword-only
[1mscipy.integrate._quadpack_py.nquad(B[m is inconsistent, runtime argument "full_output" is not keyword-only
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-1 = Unpack[()]],) | (Unpack[_Ts`-1 = Unpack[()]],) | (Unpack[_Ts`-1 = Unpack[()]],) | (Unpack[_Ts`-1 = Unpack[()]],). This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, runtime argument "full_output" is not keyword-only
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, stub does not have argument "epsabs"
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, stub does not have argument "epsrel"
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, stub does not have argument "limit"
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, stub does not have argument "points"
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, stub does not have argument "weight"
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, stub does not have argument "wvar"
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, stub does not have argument "wopts"
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, runtime argument "maxp1" is not keyword-only
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, runtime argument "limlst" is not keyword-only
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, runtime argument "complex_func" is not keyword-only
[1mscipy.integrate._quadpack_py.quad(B[m is inconsistent, runtime does not have **kwargs argument "kwds"
[1mscipy.integrate._quadpack_py.tplquad(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-1 = Unpack[()]],)
[1mscipy.integrate._quadpack_py.tplquad(B[m is inconsistent, runtime argument "epsabs" is not keyword-only
[1mscipy.integrate._quadpack_py.tplquad(B[m is inconsistent, runtime argument "epsrel" is not keyword-only
[1mscipy.integrate._quadrature.fixed_quad(B[m is inconsistent, runtime argument "args" has a default value of type (), which is incompatible with stub argument type (Unpack[_Ts`-2 = Unpack[()]],)
[1mscipy.integrate._tanhsinh.nsum(B[m is not present at runtime
[1mscipy.integrate.lsoda.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.integrate.lsoda.lsoda(B[m is not present in stub
[1mscipy.integrate.odepack.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.integrate.odepack.ODEintWarning(B[m is not present in stub
[1mscipy.integrate.odepack.odeint(B[m is not present in stub
[1mscipy.integrate.quadpack.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.integrate.quadpack.IntegrationWarning(B[m is not present in stub
[1mscipy.integrate.quadpack.dblquad(B[m is not present in stub
[1mscipy.integrate.quadpack.nquad(B[m is not present in stub
[1mscipy.integrate.quadpack.quad(B[m is not present in stub
[1mscipy.integrate.quadpack.tplquad(B[m is not present in stub
[1mscipy.interpolate.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "k" is not keyword-only
[1mscipy.interpolate.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "ext" is not keyword-only
[1mscipy.interpolate.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "check_finite" is not keyword-only
[1mscipy.interpolate.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime does not have argument "s"
[1mscipy.interpolate.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "kx" is not keyword-only
[1mscipy.interpolate.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "ky" is not keyword-only
[1mscipy.interpolate.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "eps" is not keyword-only
[1mscipy.interpolate.LSQSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate.LSQSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "eps" is not keyword-only
[1mscipy.interpolate.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "k" is not keyword-only
[1mscipy.interpolate.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "ext" is not keyword-only
[1mscipy.interpolate.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "check_finite" is not keyword-only
[1mscipy.interpolate.LinAlgError(B[m is not present at runtime
[1mscipy.interpolate.RectBivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate.RectBivariateSpline.__init__(B[m is inconsistent, runtime argument "kx" is not keyword-only
[1mscipy.interpolate.RectBivariateSpline.__init__(B[m is inconsistent, runtime argument "ky" is not keyword-only
[1mscipy.interpolate.RectBivariateSpline.__init__(B[m is inconsistent, runtime argument "s" is not keyword-only
[1mscipy.interpolate.RectSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "pole_continuity" is not keyword-only
[1mscipy.interpolate.RectSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "pole_values" is not keyword-only
[1mscipy.interpolate.RectSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "pole_exact" is not keyword-only
[1mscipy.interpolate.RectSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "pole_flat" is not keyword-only
[1mscipy.interpolate.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "kx" is not keyword-only
[1mscipy.interpolate.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "ky" is not keyword-only
[1mscipy.interpolate.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "s" is not keyword-only
[1mscipy.interpolate.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "eps" is not keyword-only
[1mscipy.interpolate.SmoothSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate.SmoothSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "s" is not keyword-only
[1mscipy.interpolate.SmoothSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "eps" is not keyword-only
[1mscipy.interpolate.SphereBivariateSpline(B[m is not present at runtime
[1mscipy.interpolate.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "k" is not keyword-only
[1mscipy.interpolate.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "s" is not keyword-only
[1mscipy.interpolate.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "ext" is not keyword-only
[1mscipy.interpolate.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "check_finite" is not keyword-only
[1mscipy.interpolate.check_random_state(B[m is not present at runtime
[1mscipy.interpolate.cho_solve_banded(B[m is not present at runtime
[1mscipy.interpolate.cholesky_banded(B[m is not present at runtime
[1mscipy.interpolate.comb(B[m is not present at runtime
[1mscipy.interpolate.copy_if_needed(B[m is not present at runtime
[1mscipy.interpolate.csr_array(B[m is not present at runtime
[1mscipy.interpolate.dblint(B[m is not present at runtime
[1mscipy.interpolate.dfitpack_int(B[m is not present at runtime
[1mscipy.interpolate.err_mesg(B[m is not present at runtime
[1mscipy.interpolate.factorial(B[m is not present at runtime
[1mscipy.interpolate.float_factorial(B[m is not present at runtime
[1mscipy.interpolate.fpcheck(B[m is not present at runtime
[1mscipy.interpolate.get_lapack_funcs(B[m is not present at runtime
[1mscipy.interpolate.interpnd(B[m is not present in stub
[1mscipy.interpolate.minimize_scalar(B[m is not present at runtime
[1mscipy.interpolate.normalize_axis_index(B[m is not present at runtime
[1mscipy.interpolate.poch(B[m is not present at runtime
[1mscipy.interpolate.prepare_input(B[m is not present at runtime
[1mscipy.interpolate.solve(B[m is not present at runtime
[1mscipy.interpolate.solve_banded(B[m is not present at runtime
[1mscipy.interpolate._bsplines.solve(B[m is inconsistent, runtime argument "assume_a" has a default value of 'gen', which is different from stub argument default None
[1mscipy.interpolate._cubic.solve(B[m is inconsistent, runtime argument "assume_a" has a default value of 'gen', which is different from stub argument default None
[1mscipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "k" is not keyword-only
[1mscipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "ext" is not keyword-only
[1mscipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime argument "check_finite" is not keyword-only
[1mscipy.interpolate._fitpack2.InterpolatedUnivariateSpline.__init__(B[m is inconsistent, runtime does not have argument "s"
[1mscipy.interpolate._fitpack2.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "kx" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "ky" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQBivariateSpline.__init__(B[m is inconsistent, runtime argument "eps" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "eps" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "k" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "ext" is not keyword-only
[1mscipy.interpolate._fitpack2.LSQUnivariateSpline.__init__(B[m is inconsistent, runtime argument "check_finite" is not keyword-only
[1mscipy.interpolate._fitpack2.RectBivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate._fitpack2.RectBivariateSpline.__init__(B[m is inconsistent, runtime argument "kx" is not keyword-only
[1mscipy.interpolate._fitpack2.RectBivariateSpline.__init__(B[m is inconsistent, runtime argument "ky" is not keyword-only
[1mscipy.interpolate._fitpack2.RectBivariateSpline.__init__(B[m is inconsistent, runtime argument "s" is not keyword-only
[1mscipy.interpolate._fitpack2.RectSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "pole_continuity" is not keyword-only
[1mscipy.interpolate._fitpack2.RectSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "pole_values" is not keyword-only
[1mscipy.interpolate._fitpack2.RectSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "pole_exact" is not keyword-only
[1mscipy.interpolate._fitpack2.RectSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "pole_flat" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "kx" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "ky" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "s" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothBivariateSpline.__init__(B[m is inconsistent, runtime argument "eps" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "s" is not keyword-only
[1mscipy.interpolate._fitpack2.SmoothSphereBivariateSpline.__init__(B[m is inconsistent, runtime argument "eps" is not keyword-only
[1mscipy.interpolate._fitpack2.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "w" is not keyword-only
[1mscipy.interpolate._fitpack2.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "bbox" is not keyword-only
[1mscipy.interpolate._fitpack2.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "k" is not keyword-only
[1mscipy.interpolate._fitpack2.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "s" is not keyword-only
[1mscipy.interpolate._fitpack2.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "ext" is not keyword-only
[1mscipy.interpolate._fitpack2.UnivariateSpline.__init__(B[m is inconsistent, runtime argument "check_finite" is not keyword-only
[1mscipy.interpolate._fitpack2._BivariateSplineBase.__call__(B[m is inconsistent, runtime argument "grid" is not keyword-only
[1mscipy.interpolate._interpolate.comb(B[m is inconsistent, stub argument "n" differs from runtime argument "N"
[1mscipy.interpolate._polyint.factorial(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.interpolate._rbfinterp_pythran.NAME_TO_FUNC(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.__pythran__(B[m is not present in stub
[1mscipy.interpolate._rbfinterp_pythran.cubic(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.gaussian(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.inverse_multiquadric(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.inverse_quadratic(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.kernel_matrix(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.kernel_vector(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.linear(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.multiquadric(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.polynomial_matrix(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.polynomial_vector(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.quintic(B[m is not present at runtime
[1mscipy.interpolate._rbfinterp_pythran.thin_plate_spline(B[m is not present at runtime
[1mscipy.interpolate.dfitpack.bispeu(B[m is not present in stub
[1mscipy.interpolate.dfitpack.bispev(B[m is not present in stub
[1mscipy.interpolate.dfitpack.curfit(B[m is not present in stub
[1mscipy.interpolate.dfitpack.dblint(B[m is not present in stub
[1mscipy.interpolate.dfitpack.fpchec(B[m is not present in stub
[1mscipy.interpolate.dfitpack.fpcurf0(B[m is not present in stub
[1mscipy.interpolate.dfitpack.fpcurf1(B[m is not present in stub
[1mscipy.interpolate.dfitpack.fpcurfm1(B[m is not present in stub
[1mscipy.interpolate.dfitpack.parcur(B[m is not present in stub
[1mscipy.interpolate.dfitpack.parder(B[m is not present in stub
[1mscipy.interpolate.dfitpack.pardeu(B[m is not present in stub
[1mscipy.interpolate.dfitpack.pardtc(B[m is not present in stub
[1mscipy.interpolate.dfitpack.percur(B[m is not present in stub
[1mscipy.interpolate.dfitpack.regrid_smth(B[m is not present in stub
[1mscipy.interpolate.dfitpack.regrid_smth_spher(B[m is not present in stub
[1mscipy.interpolate.dfitpack.spalde(B[m is not present in stub
[1mscipy.interpolate.dfitpack.spherfit_lsq(B[m is not present in stub
[1mscipy.interpolate.dfitpack.spherfit_smth(B[m is not present in stub
[1mscipy.interpolate.dfitpack.splder(B[m is not present in stub
[1mscipy.interpolate.dfitpack.splev(B[m is not present in stub
[1mscipy.interpolate.dfitpack.splint(B[m is not present in stub
[1mscipy.interpolate.dfitpack.sproot(B[m is not present in stub
[1mscipy.interpolate.dfitpack.surfit_lsq(B[m is not present in stub
[1mscipy.interpolate.dfitpack.surfit_smth(B[m is not present in stub
[1mscipy.interpolate.dfitpack.types(B[m is not present in stub
[1mscipy.interpolate.fitpack.BSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack.bisplev(B[m is not present in stub
[1mscipy.interpolate.fitpack.bisplrep(B[m is not present in stub
[1mscipy.interpolate.fitpack.insert(B[m is not present in stub
[1mscipy.interpolate.fitpack.spalde(B[m is not present in stub
[1mscipy.interpolate.fitpack.splantider(B[m is not present in stub
[1mscipy.interpolate.fitpack.splder(B[m is not present in stub
[1mscipy.interpolate.fitpack.splev(B[m is not present in stub
[1mscipy.interpolate.fitpack.splint(B[m is not present in stub
[1mscipy.interpolate.fitpack.splprep(B[m is not present in stub
[1mscipy.interpolate.fitpack.splrep(B[m is not present in stub
[1mscipy.interpolate.fitpack.sproot(B[m is not present in stub
[1mscipy.interpolate.fitpack2.BivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.InterpolatedUnivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.LSQBivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.LSQSphereBivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.LSQUnivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.RectBivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.RectSphereBivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.SmoothBivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.SmoothSphereBivariateSpline(B[m is not present in stub
[1mscipy.interpolate.fitpack2.UnivariateSpline(B[m is not present in stub
[1mscipy.interpolate.interpnd.GradientEstimationWarning(B[m is not present in stub
[1mscipy.interpolate.interpnd.estimate_gradients_2d_global(B[m is not present in stub
[1mscipy.interpolate.interpolate.BPoly(B[m is not present in stub
[1mscipy.interpolate.interpolate.BSpline(B[m is not present in stub
[1mscipy.interpolate.interpolate.NdPPoly(B[m is not present in stub
[1mscipy.interpolate.interpolate.PPoly(B[m is not present in stub
[1mscipy.interpolate.interpolate.RectBivariateSpline(B[m is not present in stub
[1mscipy.interpolate.interpolate.RegularGridInterpolator(B[m is not present in stub
[1mscipy.interpolate.interpolate.interp1d(B[m is not present in stub
[1mscipy.interpolate.interpolate.interp2d(B[m is not present in stub
[1mscipy.interpolate.interpolate.interpn(B[m is not present in stub
[1mscipy.interpolate.interpolate.lagrange(B[m is not present in stub
[1mscipy.interpolate.interpolate.make_interp_spline(B[m is not present in stub
[1mscipy.interpolate.ndgriddata.CloughTocher2DInterpolator(B[m is not present in stub
[1mscipy.interpolate.ndgriddata.LinearNDInterpolator(B[m is not present in stub
[1mscipy.interpolate.ndgriddata.NearestNDInterpolator(B[m is not present in stub
[1mscipy.interpolate.ndgriddata.griddata(B[m is not present in stub
[1mscipy.interpolate.polyint.BarycentricInterpolator(B[m is not present in stub
[1mscipy.interpolate.polyint.KroghInterpolator(B[m is not present in stub
[1mscipy.interpolate.polyint.approximate_taylor_polynomial(B[m is not present in stub
[1mscipy.interpolate.polyint.barycentric_interpolate(B[m is not present in stub
[1mscipy.interpolate.polyint.krogh_interpolate(B[m is not present in stub
[1mscipy.interpolate.rbf.Rbf(B[m is not present in stub
[1mscipy.io.matlab(B[m is not present in stub
[1mscipy.io._fast_matrix_market._TextToBytesWrapper.peek(B[m is inconsistent, runtime argument "size" has a default value of -1, which is different from stub argument default 0
[1mscipy.io.arff.Attribute(B[m is not present at runtime
[1mscipy.io.arff.DateAttribute(B[m is not present at runtime
[1mscipy.io.arff.NominalAttribute(B[m is not present at runtime
[1mscipy.io.arff.NumericAttribute(B[m is not present at runtime
[1mscipy.io.arff.RelationalAttribute(B[m is not present at runtime
[1mscipy.io.arff.StringAttribute(B[m is not present at runtime
[1mscipy.io.arff.basic_stats(B[m is not present at runtime
[1mscipy.io.arff.csv_sniffer_has_bug_last_field(B[m is not present at runtime
[1mscipy.io.arff.print_attribute(B[m is not present at runtime
[1mscipy.io.arff.r_attribute(B[m is not present at runtime
[1mscipy.io.arff.r_comattrval(B[m is not present at runtime
[1mscipy.io.arff.r_comment(B[m is not present at runtime
[1mscipy.io.arff.r_datameta(B[m is not present at runtime
[1mscipy.io.arff.r_date(B[m is not present at runtime
[1mscipy.io.arff.r_empty(B[m is not present at runtime
[1mscipy.io.arff.r_headerline(B[m is not present at runtime
[1mscipy.io.arff.r_meta(B[m is not present at runtime
[1mscipy.io.arff.r_nominal(B[m is not present at runtime
[1mscipy.io.arff.r_relation(B[m is not present at runtime
[1mscipy.io.arff.r_wcomattrval(B[m is not present at runtime
[1mscipy.io.arff.read_header(B[m is not present at runtime
[1mscipy.io.arff.read_relational_attribute(B[m is not present at runtime
[1mscipy.io.arff.split_data_line(B[m is not present at runtime
[1mscipy.io.arff.to_attribute(B[m is not present at runtime
[1mscipy.io.arff.tokenize_attribute(B[m is not present at runtime
[1mscipy.io.arff.tokenize_single_comma(B[m is not present at runtime
[1mscipy.io.arff.tokenize_single_wcomma(B[m is not present at runtime
[1mscipy.io.arff.workaround_csv_sniffer_bug_last_field(B[m is not present at runtime
[1mscipy.io.arff._arffread.DateAttribute.type_name(B[m variable differs from runtime type None
[1mscipy.io.arff._arffread.NumericAttribute.type_name(B[m variable differs from runtime type None
[1mscipy.io.arff._arffread.RelationalAttribute.type_name(B[m variable differs from runtime type None
[1mscipy.io.arff._arffread.StringAttribute.type_name(B[m variable differs from runtime type None
[1mscipy.io.arff.arffread.ArffError(B[m is not present in stub
[1mscipy.io.arff.arffread.MetaData(B[m is not present in stub
[1mscipy.io.arff.arffread.ParseArffError(B[m is not present in stub
[1mscipy.io.arff.arffread.loadarff(B[m is not present in stub
[1mscipy.io.harwell_boeing.hb_read(B[m is not present in stub
[1mscipy.io.harwell_boeing.hb_write(B[m is not present in stub
[1mscipy.io.idl.readsav(B[m is not present in stub
[1mscipy.io.matlab.mio.loadmat(B[m is not present in stub
[1mscipy.io.matlab.mio.savemat(B[m is not present in stub
[1mscipy.io.matlab.mio.whosmat(B[m is not present in stub
[1mscipy.io.matlab.mio5.MatReadError(B[m is not present in stub
[1mscipy.io.matlab.mio5.MatReadWarning(B[m is not present in stub
[1mscipy.io.matlab.mio5.MatWriteError(B[m is not present in stub
[1mscipy.io.matlab.mio5.MatlabFunction(B[m is not present in stub
[1mscipy.io.matlab.mio5.MatlabObject(B[m is not present in stub
[1mscipy.io.matlab.mio5.mat_struct(B[m is not present in stub
[1mscipy.io.matlab.mio5.varmats_from_mat(B[m is not present in stub
[1mscipy.io.matlab.mio5_params.MatlabFunction(B[m is not present in stub
[1mscipy.io.matlab.mio5_params.MatlabObject(B[m is not present in stub
[1mscipy.io.matlab.mio5_params.MatlabOpaque(B[m is not present in stub
[1mscipy.io.matlab.mio5_params.mat_struct(B[m is not present in stub
[1mscipy.io.matlab.miobase.MatReadError(B[m is not present in stub
[1mscipy.io.matlab.miobase.MatReadWarning(B[m is not present in stub
[1mscipy.io.matlab.miobase.MatWriteError(B[m is not present in stub
[1mscipy.io.mmio.mminfo(B[m is not present in stub
[1mscipy.io.mmio.mmread(B[m is not present in stub
[1mscipy.io.mmio.mmwrite(B[m is not present in stub
[1mscipy.io.netcdf.netcdf_file(B[m is not present in stub
[1mscipy.io.netcdf.netcdf_variable(B[m is not present in stub
[1mscipy.linalg.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.cython_blas(B[m is not present in stub
[1mscipy.linalg.cython_lapack(B[m is not present in stub
[1mscipy.linalg.decomp_cholesky(B[m is not present in stub
[1mscipy.linalg.decomp_lu(B[m is not present in stub
[1mscipy.linalg.decomp_qr(B[m is not present in stub
[1mscipy.linalg.decomp_schur(B[m is not present in stub
[1mscipy.linalg.decomp_svd(B[m is not present in stub
[1mscipy.linalg.eig(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg.eig(B[m is inconsistent, stub argument "a" differs from runtime argument "b"
[1mscipy.linalg.eig(B[m is inconsistent, runtime argument "b" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.eig(B[m is inconsistent, stub argument "b" differs from runtime argument "left"
[1mscipy.linalg.eig(B[m is inconsistent, stub argument "b" differs from runtime argument "right"
[1mscipy.linalg.eig(B[m is inconsistent, stub argument "left" differs from runtime argument "overwrite_a"
[1mscipy.linalg.eig(B[m is inconsistent, stub argument "left" differs from runtime argument "overwrite_b"
[1mscipy.linalg.eig(B[m is inconsistent, stub argument "right" differs from runtime argument "check_finite"
[1mscipy.linalg.eig(B[m is inconsistent, stub argument "right" differs from runtime argument "homogeneous_eigvals"
[1mscipy.linalg.eig(B[m is inconsistent, runtime argument "homogeneous_eigvals" has a default value of type False, which is incompatible with stub argument type True. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.eig(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg.eig(B[m is inconsistent, runtime does not have argument "overwrite_b"
[1mscipy.linalg.eig(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.eig(B[m is inconsistent, runtime does not have argument "homogeneous_eigvals"
[1mscipy.linalg.eig_banded(B[m is inconsistent, stub argument "a_band" has a default value but runtime argument does not
[1mscipy.linalg.eig_banded(B[m is inconsistent, stub argument "a_band" differs from runtime argument "lower"
[1mscipy.linalg.eig_banded(B[m is inconsistent, stub argument "lower" differs from runtime argument "eigvals_only"
[1mscipy.linalg.eig_banded(B[m is inconsistent, stub argument "lower" differs from runtime argument "overwrite_a_band"
[1mscipy.linalg.eig_banded(B[m is inconsistent, stub argument "eigvals_only" differs from runtime argument "select"
[1mscipy.linalg.eig_banded(B[m is inconsistent, runtime argument "select" has a default value of type 'a', which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.eig_banded(B[m is inconsistent, stub argument "eigvals_only" differs from runtime argument "select_range"
[1mscipy.linalg.eig_banded(B[m is inconsistent, runtime argument "select_range" has a default value of type None, which is incompatible with stub argument type True. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.eig_banded(B[m is inconsistent, stub argument "overwrite_a_band" differs from runtime argument "max_ev"
[1mscipy.linalg.eig_banded(B[m is inconsistent, stub argument "select" differs from runtime argument "check_finite"
[1mscipy.linalg.eig_banded(B[m is inconsistent, runtime argument "check_finite" has a default value of type True, which is incompatible with stub argument type 'a' | 'v' | 'i'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.eig_banded(B[m is inconsistent, runtime does not have argument "select_range"
[1mscipy.linalg.eig_banded(B[m is inconsistent, runtime does not have argument "max_ev"
[1mscipy.linalg.eig_banded(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.eigvals_banded(B[m is inconsistent, runtime argument "lower" has a default value of False, which is different from stub argument default True
[1mscipy.linalg.expm_frechet(B[m is inconsistent, stub argument "A" has a default value but runtime argument does not
[1mscipy.linalg.expm_frechet(B[m is inconsistent, stub argument "A" differs from runtime argument "E"
[1mscipy.linalg.expm_frechet(B[m is inconsistent, stub argument "A" has a default value but runtime argument does not
[1mscipy.linalg.expm_frechet(B[m is inconsistent, stub argument "E" differs from runtime argument "method"
[1mscipy.linalg.expm_frechet(B[m is inconsistent, runtime argument "method" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.expm_frechet(B[m is inconsistent, stub argument "E" differs from runtime argument "compute_expm"
[1mscipy.linalg.expm_frechet(B[m is inconsistent, stub argument "method" differs from runtime argument "check_finite"
[1mscipy.linalg.expm_frechet(B[m is inconsistent, runtime argument "check_finite" has a default value of type True, which is incompatible with stub argument type 'SPS' | 'blockEnlarge' | None. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.expm_frechet(B[m is inconsistent, runtime does not have argument "method"
[1mscipy.linalg.expm_frechet(B[m is inconsistent, runtime does not have argument "compute_expm"
[1mscipy.linalg.expm_frechet(B[m is inconsistent, runtime does not have argument "compute_expm"
[1mscipy.linalg.expm_frechet(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.invpascal(B[m is inconsistent, stub argument "n" has a default value but runtime argument does not
[1mscipy.linalg.invpascal(B[m is inconsistent, stub argument "n" differs from runtime argument "kind"
[1mscipy.linalg.invpascal(B[m is inconsistent, runtime argument "kind" has a default value of type 'symmetric', which is incompatible with stub argument type int | numpy.integer[numpy._typing.NBitBase] | numpy.bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.invpascal(B[m is inconsistent, stub argument "kind" differs from runtime argument "exact"
[1mscipy.linalg.invpascal(B[m is inconsistent, runtime argument "exact" has a default value of type True, which is incompatible with stub argument type 'symmetric' | 'upper' | 'lower'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.invpascal(B[m is inconsistent, runtime does not have argument "kind"
[1mscipy.linalg.invpascal(B[m is inconsistent, runtime does not have argument "exact"
[1mscipy.linalg.invpascal(B[m is inconsistent, runtime does not have argument "exact"
[1mscipy.linalg.lu(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg.lu(B[m is inconsistent, stub argument "a" differs from runtime argument "permute_l"
[1mscipy.linalg.lu(B[m is inconsistent, stub argument "permute_l" differs from runtime argument "overwrite_a"
[1mscipy.linalg.lu(B[m is inconsistent, stub argument "permute_l" differs from runtime argument "check_finite"
[1mscipy.linalg.lu(B[m is inconsistent, runtime argument "check_finite" has a default value of type True, which is incompatible with stub argument type False. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.lu(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "p_indices"
[1mscipy.linalg.lu(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg.lu(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.lu(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.lu(B[m is inconsistent, runtime does not have argument "p_indices"
[1mscipy.linalg.lu(B[m is inconsistent, runtime does not have argument "p_indices"
[1mscipy.linalg.matfuncs(B[m is not present in stub
[1mscipy.linalg.matmul_toeplitz(B[m is inconsistent, runtime argument "check_finite" has a default value of False, which is different from stub argument default True
[1mscipy.linalg.matrix_balance(B[m is inconsistent, stub argument "A" has a default value but runtime argument does not
[1mscipy.linalg.matrix_balance(B[m is inconsistent, stub argument "A" differs from runtime argument "permute"
[1mscipy.linalg.matrix_balance(B[m is inconsistent, stub argument "permute" differs from runtime argument "scale"
[1mscipy.linalg.matrix_balance(B[m is inconsistent, stub argument "permute" differs from runtime argument "separate"
[1mscipy.linalg.matrix_balance(B[m is inconsistent, stub argument "scale" differs from runtime argument "overwrite_a"
[1mscipy.linalg.matrix_balance(B[m is inconsistent, runtime does not have argument "scale"
[1mscipy.linalg.matrix_balance(B[m is inconsistent, runtime does not have argument "separate"
[1mscipy.linalg.matrix_balance(B[m is inconsistent, runtime does not have argument "separate"
[1mscipy.linalg.matrix_balance(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg.misc(B[m is not present in stub
[1mscipy.linalg.null_space(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.null_space(B[m is inconsistent, runtime does not have argument "lapack_driver"
[1mscipy.linalg.null_space(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg.pascal(B[m is inconsistent, stub argument "n" has a default value but runtime argument does not
[1mscipy.linalg.pascal(B[m is inconsistent, stub argument "n" differs from runtime argument "kind"
[1mscipy.linalg.pascal(B[m is inconsistent, runtime argument "kind" has a default value of type 'symmetric', which is incompatible with stub argument type int | numpy.integer[numpy._typing.NBitBase] | numpy.bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.pascal(B[m is inconsistent, stub argument "kind" differs from runtime argument "exact"
[1mscipy.linalg.pascal(B[m is inconsistent, runtime argument "exact" has a default value of type True, which is incompatible with stub argument type 'symmetric' | 'upper' | 'lower'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.pascal(B[m is inconsistent, runtime does not have argument "kind"
[1mscipy.linalg.pascal(B[m is inconsistent, runtime does not have argument "exact"
[1mscipy.linalg.pascal(B[m is inconsistent, runtime does not have argument "exact"
[1mscipy.linalg.pinvh(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg.pinvh(B[m is inconsistent, stub argument "a" differs from runtime argument "atol"
[1mscipy.linalg.pinvh(B[m is inconsistent, runtime argument "atol" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.pinvh(B[m is inconsistent, stub argument "atol" differs from runtime argument "rtol"
[1mscipy.linalg.pinvh(B[m is inconsistent, stub argument "atol" differs from runtime argument "lower"
[1mscipy.linalg.pinvh(B[m is inconsistent, stub argument "rtol" differs from runtime argument "return_rank"
[1mscipy.linalg.pinvh(B[m is inconsistent, stub argument "rtol" differs from runtime argument "check_finite"
[1mscipy.linalg.pinvh(B[m is inconsistent, runtime does not have argument "lower"
[1mscipy.linalg.pinvh(B[m is inconsistent, runtime does not have argument "lower"
[1mscipy.linalg.pinvh(B[m is inconsistent, runtime does not have argument "return_rank"
[1mscipy.linalg.pinvh(B[m is inconsistent, runtime does not have argument "return_rank"
[1mscipy.linalg.pinvh(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.qr(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg.qr(B[m is inconsistent, stub argument "a" differs from runtime argument "overwrite_a"
[1mscipy.linalg.qr(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "lwork"
[1mscipy.linalg.qr(B[m is inconsistent, runtime argument "lwork" has a default value of type None, which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.qr(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "mode"
[1mscipy.linalg.qr(B[m is inconsistent, runtime argument "mode" has a default value of type 'full', which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.qr(B[m is inconsistent, stub argument "lwork" differs from runtime argument "pivoting"
[1mscipy.linalg.qr(B[m is inconsistent, stub argument "lwork" differs from runtime argument "check_finite"
[1mscipy.linalg.qr(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.linalg.qr(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.linalg.qr(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.linalg.qr(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.linalg.qr(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg.qr_multiply(B[m is inconsistent, stub argument "a" differs from runtime argument "c"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg.qr_multiply(B[m is inconsistent, stub argument "c" differs from runtime argument "mode"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, stub argument "c" differs from runtime argument "pivoting"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, stub argument "mode" differs from runtime argument "conjugate"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, runtime argument "conjugate" has a default value of type False, which is incompatible with stub argument type 'left' | 'right'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.qr_multiply(B[m is inconsistent, stub argument "mode" differs from runtime argument "overwrite_a"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, runtime argument "overwrite_a" has a default value of type False, which is incompatible with stub argument type 'left' | 'right'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.qr_multiply(B[m is inconsistent, stub argument "pivoting" differs from runtime argument "overwrite_c"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, runtime does not have argument "conjugate"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg.qr_multiply(B[m is inconsistent, runtime does not have argument "overwrite_c"
[1mscipy.linalg.rq(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg.rq(B[m is inconsistent, stub argument "a" differs from runtime argument "overwrite_a"
[1mscipy.linalg.rq(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "lwork"
[1mscipy.linalg.rq(B[m is inconsistent, runtime argument "lwork" has a default value of type None, which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.rq(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "mode"
[1mscipy.linalg.rq(B[m is inconsistent, runtime argument "mode" has a default value of type 'full', which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.rq(B[m is inconsistent, stub argument "lwork" differs from runtime argument "check_finite"
[1mscipy.linalg.rq(B[m is inconsistent, runtime does not have argument "lwork"
[1mscipy.linalg.rq(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.linalg.rq(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.linalg.rq(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.solve(B[m is inconsistent, runtime argument "assume_a" has a default value of 'gen', which is different from stub argument default None
[1mscipy.linalg.special_matrices(B[m is not present in stub
[1mscipy.linalg.svd(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg.svd(B[m is inconsistent, stub argument "a" differs from runtime argument "full_matrices"
[1mscipy.linalg.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "compute_uv"
[1mscipy.linalg.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "overwrite_a"
[1mscipy.linalg.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "check_finite"
[1mscipy.linalg.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "lapack_driver"
[1mscipy.linalg.svd(B[m is inconsistent, runtime argument "lapack_driver" has a default value of type 'gesdd', which is incompatible with stub argument type False. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg.svd(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg.svd(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg.svd(B[m is inconsistent, runtime does not have argument "lapack_driver"
[1mscipy.linalg._basic.matmul_toeplitz(B[m is inconsistent, runtime argument "check_finite" has a default value of False, which is different from stub argument default True
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, stub argument "A" has a default value but runtime argument does not
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, stub argument "A" differs from runtime argument "permute"
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, stub argument "permute" differs from runtime argument "scale"
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, stub argument "permute" differs from runtime argument "separate"
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, stub argument "scale" differs from runtime argument "overwrite_a"
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, runtime does not have argument "scale"
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, runtime does not have argument "separate"
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, runtime does not have argument "separate"
[1mscipy.linalg._basic.matrix_balance(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, stub argument "a" differs from runtime argument "atol"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, runtime argument "atol" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, stub argument "atol" differs from runtime argument "rtol"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, stub argument "atol" differs from runtime argument "lower"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, stub argument "rtol" differs from runtime argument "return_rank"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, stub argument "rtol" differs from runtime argument "check_finite"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, runtime does not have argument "lower"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, runtime does not have argument "lower"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, runtime does not have argument "return_rank"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, runtime does not have argument "return_rank"
[1mscipy.linalg._basic.pinvh(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._basic.solve(B[m is inconsistent, runtime argument "assume_a" has a default value of 'gen', which is different from stub argument default None
[1mscipy.linalg._cythonized_array_utils.numeric_t(B[m is not present at runtime
[1mscipy.linalg._decomp.eig(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg._decomp.eig(B[m is inconsistent, stub argument "a" differs from runtime argument "b"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, runtime argument "b" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp.eig(B[m is inconsistent, stub argument "b" differs from runtime argument "left"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, stub argument "b" differs from runtime argument "right"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, stub argument "left" differs from runtime argument "overwrite_a"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, stub argument "left" differs from runtime argument "overwrite_b"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, stub argument "right" differs from runtime argument "check_finite"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, stub argument "right" differs from runtime argument "homogeneous_eigvals"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, runtime argument "homogeneous_eigvals" has a default value of type False, which is incompatible with stub argument type True. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp.eig(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, runtime does not have argument "overwrite_b"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._decomp.eig(B[m is inconsistent, runtime does not have argument "homogeneous_eigvals"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, stub argument "a_band" has a default value but runtime argument does not
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, stub argument "a_band" differs from runtime argument "lower"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, stub argument "lower" differs from runtime argument "eigvals_only"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, stub argument "lower" differs from runtime argument "overwrite_a_band"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, stub argument "eigvals_only" differs from runtime argument "select"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, runtime argument "select" has a default value of type 'a', which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, stub argument "eigvals_only" differs from runtime argument "select_range"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, runtime argument "select_range" has a default value of type None, which is incompatible with stub argument type True. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, stub argument "overwrite_a_band" differs from runtime argument "max_ev"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, stub argument "select" differs from runtime argument "check_finite"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, runtime argument "check_finite" has a default value of type True, which is incompatible with stub argument type 'a' | 'v' | 'i'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, runtime does not have argument "select_range"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, runtime does not have argument "max_ev"
[1mscipy.linalg._decomp.eig_banded(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._decomp.eigvals_banded(B[m is inconsistent, runtime argument "lower" has a default value of False, which is different from stub argument default True
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, stub argument "a" differs from runtime argument "permute_l"
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, stub argument "permute_l" differs from runtime argument "overwrite_a"
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, stub argument "permute_l" differs from runtime argument "check_finite"
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, runtime argument "check_finite" has a default value of type True, which is incompatible with stub argument type False. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "p_indices"
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, runtime does not have argument "p_indices"
[1mscipy.linalg._decomp_lu.lu(B[m is inconsistent, runtime does not have argument "p_indices"
[1mscipy.linalg._decomp_lu_cython.__all__(B[m is not present at runtime
[1mscipy.linalg._decomp_lu_cython.lu_decompose(B[m is not present at runtime
[1mscipy.linalg._decomp_lu_cython.lu_dispatcher(B[m is inconsistent, stub argument "lu" differs from runtime argument "u"
[1mscipy.linalg._decomp_lu_cython.lu_dispatcher(B[m is inconsistent, stub argument "perm" differs from runtime argument "piv"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, stub argument "a" differs from runtime argument "overwrite_a"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "lwork"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, runtime argument "lwork" has a default value of type None, which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "mode"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, runtime argument "mode" has a default value of type 'full', which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, stub argument "lwork" differs from runtime argument "pivoting"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, stub argument "lwork" differs from runtime argument "check_finite"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.linalg._decomp_qr.qr(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, stub argument "a" differs from runtime argument "c"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, stub argument "c" differs from runtime argument "mode"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, stub argument "c" differs from runtime argument "pivoting"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, stub argument "mode" differs from runtime argument "conjugate"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, runtime argument "conjugate" has a default value of type False, which is incompatible with stub argument type 'left' | 'right'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, stub argument "mode" differs from runtime argument "overwrite_a"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, runtime argument "overwrite_a" has a default value of type False, which is incompatible with stub argument type 'left' | 'right'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, stub argument "pivoting" differs from runtime argument "overwrite_c"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, runtime does not have argument "conjugate"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg._decomp_qr.qr_multiply(B[m is inconsistent, runtime does not have argument "overwrite_c"
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, stub argument "a" differs from runtime argument "overwrite_a"
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "lwork"
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, runtime argument "lwork" has a default value of type None, which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "mode"
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, runtime argument "mode" has a default value of type 'full', which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, stub argument "lwork" differs from runtime argument "check_finite"
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, runtime does not have argument "lwork"
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.linalg._decomp_qr.rq(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._decomp_svd.null_space(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._decomp_svd.null_space(B[m is inconsistent, runtime does not have argument "lapack_driver"
[1mscipy.linalg._decomp_svd.null_space(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, stub argument "a" differs from runtime argument "full_matrices"
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "compute_uv"
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "overwrite_a"
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "check_finite"
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "lapack_driver"
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, runtime argument "lapack_driver" has a default value of type 'gesdd', which is incompatible with stub argument type False. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._decomp_svd.svd(B[m is inconsistent, runtime does not have argument "lapack_driver"
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, stub argument "A" has a default value but runtime argument does not
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, stub argument "A" differs from runtime argument "E"
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, stub argument "A" has a default value but runtime argument does not
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, stub argument "E" differs from runtime argument "method"
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, runtime argument "method" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, stub argument "E" differs from runtime argument "compute_expm"
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, stub argument "method" differs from runtime argument "check_finite"
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, runtime argument "check_finite" has a default value of type True, which is incompatible with stub argument type 'SPS' | 'blockEnlarge' | None. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, runtime does not have argument "method"
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, runtime does not have argument "compute_expm"
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, runtime does not have argument "compute_expm"
[1mscipy.linalg._expm_frechet.expm_frechet(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, stub argument "A" has a default value but runtime argument does not
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, stub argument "A" differs from runtime argument "E"
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, stub argument "A" has a default value but runtime argument does not
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, stub argument "E" differs from runtime argument "method"
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, runtime argument "method" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, stub argument "E" differs from runtime argument "compute_expm"
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, stub argument "method" differs from runtime argument "check_finite"
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, runtime argument "check_finite" has a default value of type True, which is incompatible with stub argument type 'SPS' | 'blockEnlarge' | None. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, runtime does not have argument "method"
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, runtime does not have argument "compute_expm"
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, runtime does not have argument "compute_expm"
[1mscipy.linalg._matfuncs.expm_frechet(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.linalg._matfuncs_expm.pick_pade_structure(B[m is inconsistent, stub argument "a" differs from runtime argument "Am"
[1mscipy.linalg._solve_toeplitz.__all__(B[m is not present at runtime
[1mscipy.linalg._special_matrices.invpascal(B[m is inconsistent, stub argument "n" has a default value but runtime argument does not
[1mscipy.linalg._special_matrices.invpascal(B[m is inconsistent, stub argument "n" differs from runtime argument "kind"
[1mscipy.linalg._special_matrices.invpascal(B[m is inconsistent, runtime argument "kind" has a default value of type 'symmetric', which is incompatible with stub argument type int | numpy.integer[numpy._typing.NBitBase] | numpy.bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._special_matrices.invpascal(B[m is inconsistent, stub argument "kind" differs from runtime argument "exact"
[1mscipy.linalg._special_matrices.invpascal(B[m is inconsistent, runtime argument "exact" has a default value of type True, which is incompatible with stub argument type 'symmetric' | 'upper' | 'lower'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._special_matrices.invpascal(B[m is inconsistent, runtime does not have argument "kind"
[1mscipy.linalg._special_matrices.invpascal(B[m is inconsistent, runtime does not have argument "exact"
[1mscipy.linalg._special_matrices.invpascal(B[m is inconsistent, runtime does not have argument "exact"
[1mscipy.linalg._special_matrices.pascal(B[m is inconsistent, stub argument "n" has a default value but runtime argument does not
[1mscipy.linalg._special_matrices.pascal(B[m is inconsistent, stub argument "n" differs from runtime argument "kind"
[1mscipy.linalg._special_matrices.pascal(B[m is inconsistent, runtime argument "kind" has a default value of type 'symmetric', which is incompatible with stub argument type int | numpy.integer[numpy._typing.NBitBase] | numpy.bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._special_matrices.pascal(B[m is inconsistent, stub argument "kind" differs from runtime argument "exact"
[1mscipy.linalg._special_matrices.pascal(B[m is inconsistent, runtime argument "exact" has a default value of type True, which is incompatible with stub argument type 'symmetric' | 'upper' | 'lower'. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.linalg._special_matrices.pascal(B[m is inconsistent, runtime does not have argument "kind"
[1mscipy.linalg._special_matrices.pascal(B[m is inconsistent, runtime does not have argument "exact"
[1mscipy.linalg._special_matrices.pascal(B[m is inconsistent, runtime does not have argument "exact"
[1mscipy.linalg.basic.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.basic.LinAlgError(B[m is not present in stub
[1mscipy.linalg.basic.LinAlgWarning(B[m is not present in stub
[1mscipy.linalg.basic.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.basic.det(B[m is not present in stub
[1mscipy.linalg.basic.get_lapack_funcs(B[m is not present in stub
[1mscipy.linalg.basic.inv(B[m is not present in stub
[1mscipy.linalg.basic.lstsq(B[m is not present in stub
[1mscipy.linalg.basic.matmul_toeplitz(B[m is not present in stub
[1mscipy.linalg.basic.matrix_balance(B[m is not present in stub
[1mscipy.linalg.basic.pinv(B[m is not present in stub
[1mscipy.linalg.basic.pinvh(B[m is not present in stub
[1mscipy.linalg.basic.solve(B[m is not present in stub
[1mscipy.linalg.basic.solve_banded(B[m is not present in stub
[1mscipy.linalg.basic.solve_circulant(B[m is not present in stub
[1mscipy.linalg.basic.solve_toeplitz(B[m is not present in stub
[1mscipy.linalg.basic.solve_triangular(B[m is not present in stub
[1mscipy.linalg.basic.solveh_banded(B[m is not present in stub
[1mscipy.linalg.decomp.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.decomp.LinAlgError(B[m is not present in stub
[1mscipy.linalg.decomp.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.decomp.cdf2rdf(B[m is not present in stub
[1mscipy.linalg.decomp.eig(B[m is not present in stub
[1mscipy.linalg.decomp.eig_banded(B[m is not present in stub
[1mscipy.linalg.decomp.eigh(B[m is not present in stub
[1mscipy.linalg.decomp.eigh_tridiagonal(B[m is not present in stub
[1mscipy.linalg.decomp.eigvals(B[m is not present in stub
[1mscipy.linalg.decomp.eigvals_banded(B[m is not present in stub
[1mscipy.linalg.decomp.eigvalsh(B[m is not present in stub
[1mscipy.linalg.decomp.eigvalsh_tridiagonal(B[m is not present in stub
[1mscipy.linalg.decomp.get_lapack_funcs(B[m is not present in stub
[1mscipy.linalg.decomp.hessenberg(B[m is not present in stub
[1mscipy.linalg.decomp.norm(B[m is not present in stub
[1mscipy.linalg.decomp_cholesky.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.decomp_cholesky.LinAlgError(B[m is not present in stub
[1mscipy.linalg.decomp_cholesky.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.decomp_cholesky.cho_factor(B[m is not present in stub
[1mscipy.linalg.decomp_cholesky.cho_solve(B[m is not present in stub
[1mscipy.linalg.decomp_cholesky.cho_solve_banded(B[m is not present in stub
[1mscipy.linalg.decomp_cholesky.cholesky(B[m is not present in stub
[1mscipy.linalg.decomp_cholesky.cholesky_banded(B[m is not present in stub
[1mscipy.linalg.decomp_cholesky.get_lapack_funcs(B[m is not present in stub
[1mscipy.linalg.decomp_lu.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.decomp_lu.LinAlgWarning(B[m is not present in stub
[1mscipy.linalg.decomp_lu.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.decomp_lu.get_lapack_funcs(B[m is not present in stub
[1mscipy.linalg.decomp_lu.lu(B[m is not present in stub
[1mscipy.linalg.decomp_lu.lu_factor(B[m is not present in stub
[1mscipy.linalg.decomp_lu.lu_solve(B[m is not present in stub
[1mscipy.linalg.decomp_qr.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.decomp_qr.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.decomp_qr.get_lapack_funcs(B[m is not present in stub
[1mscipy.linalg.decomp_qr.qr(B[m is not present in stub
[1mscipy.linalg.decomp_qr.qr_multiply(B[m is not present in stub
[1mscipy.linalg.decomp_qr.rq(B[m is not present in stub
[1mscipy.linalg.decomp_schur.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.decomp_schur.LinAlgError(B[m is not present in stub
[1mscipy.linalg.decomp_schur.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.decomp_schur.eigvals(B[m is not present in stub
[1mscipy.linalg.decomp_schur.get_lapack_funcs(B[m is not present in stub
[1mscipy.linalg.decomp_schur.norm(B[m is not present in stub
[1mscipy.linalg.decomp_schur.rsf2csf(B[m is not present in stub
[1mscipy.linalg.decomp_schur.schur(B[m is not present in stub
[1mscipy.linalg.decomp_svd.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.decomp_svd.LinAlgError(B[m is not present in stub
[1mscipy.linalg.decomp_svd.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.decomp_svd.diagsvd(B[m is not present in stub
[1mscipy.linalg.decomp_svd.get_lapack_funcs(B[m is not present in stub
[1mscipy.linalg.decomp_svd.null_space(B[m is not present in stub
[1mscipy.linalg.decomp_svd.orth(B[m is not present in stub
[1mscipy.linalg.decomp_svd.subspace_angles(B[m is not present in stub
[1mscipy.linalg.decomp_svd.svd(B[m is not present in stub
[1mscipy.linalg.decomp_svd.svdvals(B[m is not present in stub
[1mscipy.linalg.interpolative.estimate_rank(B[m is inconsistent, runtime does not have argument "rng"
[1mscipy.linalg.interpolative.estimate_spectral_norm(B[m is inconsistent, runtime does not have argument "rng"
[1mscipy.linalg.interpolative.estimate_spectral_norm_diff(B[m is inconsistent, runtime does not have argument "rng"
[1mscipy.linalg.interpolative.interp_decomp(B[m is inconsistent, runtime does not have argument "rng"
[1mscipy.linalg.interpolative.seed(B[m is inconsistent, runtime argument "seed" has a default value of type None, which is incompatible with stub argument type Never
[1mscipy.linalg.interpolative.svd(B[m is inconsistent, runtime does not have argument "rng"
[1mscipy.linalg.matfuncs.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.matfuncs.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.matfuncs.coshm(B[m is not present in stub
[1mscipy.linalg.matfuncs.cosm(B[m is not present in stub
[1mscipy.linalg.matfuncs.expm(B[m is not present in stub
[1mscipy.linalg.matfuncs.expm_cond(B[m is not present in stub
[1mscipy.linalg.matfuncs.expm_frechet(B[m is not present in stub
[1mscipy.linalg.matfuncs.fractional_matrix_power(B[m is not present in stub
[1mscipy.linalg.matfuncs.funm(B[m is not present in stub
[1mscipy.linalg.matfuncs.inv(B[m is not present in stub
[1mscipy.linalg.matfuncs.khatri_rao(B[m is not present in stub
[1mscipy.linalg.matfuncs.logm(B[m is not present in stub
[1mscipy.linalg.matfuncs.norm(B[m is not present in stub
[1mscipy.linalg.matfuncs.rsf2csf(B[m is not present in stub
[1mscipy.linalg.matfuncs.schur(B[m is not present in stub
[1mscipy.linalg.matfuncs.signm(B[m is not present in stub
[1mscipy.linalg.matfuncs.sinhm(B[m is not present in stub
[1mscipy.linalg.matfuncs.sinm(B[m is not present in stub
[1mscipy.linalg.matfuncs.solve(B[m is not present in stub
[1mscipy.linalg.matfuncs.sqrtm(B[m is not present in stub
[1mscipy.linalg.matfuncs.svd(B[m is not present in stub
[1mscipy.linalg.matfuncs.tanhm(B[m is not present in stub
[1mscipy.linalg.matfuncs.tanm(B[m is not present in stub
[1mscipy.linalg.misc.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.misc.LinAlgError(B[m is not present in stub
[1mscipy.linalg.misc.LinAlgWarning(B[m is not present in stub
[1mscipy.linalg.misc.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.misc.get_blas_funcs(B[m is not present in stub
[1mscipy.linalg.misc.get_lapack_funcs(B[m is not present in stub
[1mscipy.linalg.misc.norm(B[m is not present in stub
[1mscipy.linalg.special_matrices.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.linalg.special_matrices.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.linalg.special_matrices.block_diag(B[m is not present in stub
[1mscipy.linalg.special_matrices.circulant(B[m is not present in stub
[1mscipy.linalg.special_matrices.companion(B[m is not present in stub
[1mscipy.linalg.special_matrices.convolution_matrix(B[m is not present in stub
[1mscipy.linalg.special_matrices.dft(B[m is not present in stub
[1mscipy.linalg.special_matrices.fiedler(B[m is not present in stub
[1mscipy.linalg.special_matrices.fiedler_companion(B[m is not present in stub
[1mscipy.linalg.special_matrices.hadamard(B[m is not present in stub
[1mscipy.linalg.special_matrices.hankel(B[m is not present in stub
[1mscipy.linalg.special_matrices.helmert(B[m is not present in stub
[1mscipy.linalg.special_matrices.hilbert(B[m is not present in stub
[1mscipy.linalg.special_matrices.invhilbert(B[m is not present in stub
[1mscipy.linalg.special_matrices.invpascal(B[m is not present in stub
[1mscipy.linalg.special_matrices.kron(B[m is not present in stub
[1mscipy.linalg.special_matrices.leslie(B[m is not present in stub
[1mscipy.linalg.special_matrices.pascal(B[m is not present in stub
[1mscipy.linalg.special_matrices.toeplitz(B[m is not present in stub
[1mscipy.misc.common.ascent(B[m is not present in stub
[1mscipy.misc.common.central_diff_weights(B[m is not present in stub
[1mscipy.misc.common.derivative(B[m is not present in stub
[1mscipy.misc.common.electrocardiogram(B[m is not present in stub
[1mscipy.misc.common.face(B[m is not present in stub
[1mscipy.misc.doccer.docformat(B[m is not present in stub
[1mscipy.misc.doccer.extend_notes_in_docstring(B[m is not present in stub
[1mscipy.misc.doccer.filldoc(B[m is not present in stub
[1mscipy.misc.doccer.indentcount_lines(B[m is not present in stub
[1mscipy.misc.doccer.inherit_docstring_from(B[m is not present in stub
[1mscipy.misc.doccer.replace_notes_in_docstring(B[m is not present in stub
[1mscipy.misc.doccer.unindent_dict(B[m is not present in stub
[1mscipy.misc.doccer.unindent_string(B[m is not present in stub
[1mscipy.ndimage.docfiller(B[m is not present at runtime
[1mscipy.ndimage.geometric_transform(B[m is inconsistent, runtime argument "extra_keywords" has a default value of {}, which is different from stub argument default None
[1mscipy.ndimage.normalize_axis_index(B[m is not present at runtime
[1mscipy.ndimage._dispatchers(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy.ndimage._dispatchers'
[1mscipy.ndimage._interpolation.geometric_transform(B[m is inconsistent, runtime argument "extra_keywords" has a default value of {}, which is different from stub argument default None
[1mscipy.ndimage._ndimage_api(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy.ndimage._ndimage_api'
[1mscipy.ndimage.filters.convolve(B[m is not present in stub
[1mscipy.ndimage.filters.convolve1d(B[m is not present in stub
[1mscipy.ndimage.filters.correlate(B[m is not present in stub
[1mscipy.ndimage.filters.correlate1d(B[m is not present in stub
[1mscipy.ndimage.filters.gaussian_filter(B[m is not present in stub
[1mscipy.ndimage.filters.gaussian_filter1d(B[m is not present in stub
[1mscipy.ndimage.filters.gaussian_gradient_magnitude(B[m is not present in stub
[1mscipy.ndimage.filters.gaussian_laplace(B[m is not present in stub
[1mscipy.ndimage.filters.generic_filter(B[m is not present in stub
[1mscipy.ndimage.filters.generic_filter1d(B[m is not present in stub
[1mscipy.ndimage.filters.generic_gradient_magnitude(B[m is not present in stub
[1mscipy.ndimage.filters.generic_laplace(B[m is not present in stub
[1mscipy.ndimage.filters.laplace(B[m is not present in stub
[1mscipy.ndimage.filters.maximum_filter(B[m is not present in stub
[1mscipy.ndimage.filters.maximum_filter1d(B[m is not present in stub
[1mscipy.ndimage.filters.median_filter(B[m is not present in stub
[1mscipy.ndimage.filters.minimum_filter(B[m is not present in stub
[1mscipy.ndimage.filters.minimum_filter1d(B[m is not present in stub
[1mscipy.ndimage.filters.percentile_filter(B[m is not present in stub
[1mscipy.ndimage.filters.prewitt(B[m is not present in stub
[1mscipy.ndimage.filters.rank_filter(B[m is not present in stub
[1mscipy.ndimage.filters.sobel(B[m is not present in stub
[1mscipy.ndimage.filters.uniform_filter(B[m is not present in stub
[1mscipy.ndimage.filters.uniform_filter1d(B[m is not present in stub
[1mscipy.ndimage.fourier.fourier_ellipsoid(B[m is not present in stub
[1mscipy.ndimage.fourier.fourier_gaussian(B[m is not present in stub
[1mscipy.ndimage.fourier.fourier_shift(B[m is not present in stub
[1mscipy.ndimage.fourier.fourier_uniform(B[m is not present in stub
[1mscipy.ndimage.interpolation.affine_transform(B[m is not present in stub
[1mscipy.ndimage.interpolation.geometric_transform(B[m is not present in stub
[1mscipy.ndimage.interpolation.map_coordinates(B[m is not present in stub
[1mscipy.ndimage.interpolation.rotate(B[m is not present in stub
[1mscipy.ndimage.interpolation.shift(B[m is not present in stub
[1mscipy.ndimage.interpolation.spline_filter(B[m is not present in stub
[1mscipy.ndimage.interpolation.spline_filter1d(B[m is not present in stub
[1mscipy.ndimage.interpolation.zoom(B[m is not present in stub
[1mscipy.ndimage.measurements.center_of_mass(B[m is not present in stub
[1mscipy.ndimage.measurements.extrema(B[m is not present in stub
[1mscipy.ndimage.measurements.find_objects(B[m is not present in stub
[1mscipy.ndimage.measurements.histogram(B[m is not present in stub
[1mscipy.ndimage.measurements.label(B[m is not present in stub
[1mscipy.ndimage.measurements.labeled_comprehension(B[m is not present in stub
[1mscipy.ndimage.measurements.maximum(B[m is not present in stub
[1mscipy.ndimage.measurements.maximum_position(B[m is not present in stub
[1mscipy.ndimage.measurements.mean(B[m is not present in stub
[1mscipy.ndimage.measurements.median(B[m is not present in stub
[1mscipy.ndimage.measurements.minimum(B[m is not present in stub
[1mscipy.ndimage.measurements.minimum_position(B[m is not present in stub
[1mscipy.ndimage.measurements.standard_deviation(B[m is not present in stub
[1mscipy.ndimage.measurements.sum(B[m is not present in stub
[1mscipy.ndimage.measurements.sum_labels(B[m is not present in stub
[1mscipy.ndimage.measurements.variance(B[m is not present in stub
[1mscipy.ndimage.measurements.watershed_ift(B[m is not present in stub
[1mscipy.ndimage.morphology.binary_closing(B[m is not present in stub
[1mscipy.ndimage.morphology.binary_dilation(B[m is not present in stub
[1mscipy.ndimage.morphology.binary_erosion(B[m is not present in stub
[1mscipy.ndimage.morphology.binary_fill_holes(B[m is not present in stub
[1mscipy.ndimage.morphology.binary_hit_or_miss(B[m is not present in stub
[1mscipy.ndimage.morphology.binary_opening(B[m is not present in stub
[1mscipy.ndimage.morphology.binary_propagation(B[m is not present in stub
[1mscipy.ndimage.morphology.black_tophat(B[m is not present in stub
[1mscipy.ndimage.morphology.distance_transform_bf(B[m is not present in stub
[1mscipy.ndimage.morphology.distance_transform_cdt(B[m is not present in stub
[1mscipy.ndimage.morphology.distance_transform_edt(B[m is not present in stub
[1mscipy.ndimage.morphology.generate_binary_structure(B[m is not present in stub
[1mscipy.ndimage.morphology.grey_closing(B[m is not present in stub
[1mscipy.ndimage.morphology.grey_dilation(B[m is not present in stub
[1mscipy.ndimage.morphology.grey_erosion(B[m is not present in stub
[1mscipy.ndimage.morphology.grey_opening(B[m is not present in stub
[1mscipy.ndimage.morphology.iterate_structure(B[m is not present in stub
[1mscipy.ndimage.morphology.morphological_gradient(B[m is not present in stub
[1mscipy.ndimage.morphology.morphological_laplace(B[m is not present in stub
[1mscipy.ndimage.morphology.white_tophat(B[m is not present in stub
[1mscipy.odr.models.Model(B[m is not present in stub
[1mscipy.odr.models.exponential(B[m is not present in stub
[1mscipy.odr.models.multilinear(B[m is not present in stub
[1mscipy.odr.models.polynomial(B[m is not present in stub
[1mscipy.odr.models.quadratic(B[m is not present in stub
[1mscipy.odr.models.unilinear(B[m is not present in stub
[1mscipy.odr.odrpack.Data(B[m is not present in stub
[1mscipy.odr.odrpack.Model(B[m is not present in stub
[1mscipy.odr.odrpack.ODR(B[m is not present in stub
[1mscipy.odr.odrpack.OdrError(B[m is not present in stub
[1mscipy.odr.odrpack.OdrStop(B[m is not present in stub
[1mscipy.odr.odrpack.OdrWarning(B[m is not present in stub
[1mscipy.odr.odrpack.Output(B[m is not present in stub
[1mscipy.odr.odrpack.RealData(B[m is not present in stub
[1mscipy.odr.odrpack.odr(B[m is not present in stub
[1mscipy.odr.odrpack.odr_error(B[m is not present in stub
[1mscipy.odr.odrpack.odr_stop(B[m is not present in stub
[1mscipy.optimize.KrylovJacobian.setup(B[m is inconsistent, stub argument "F" differs from runtime argument "f"
[1mscipy.optimize.KrylovJacobian.update(B[m is inconsistent, stub argument "F" differs from runtime argument "f"
[1mscipy.optimize.NonlinearConstraint.__init__(B[m is inconsistent, runtime argument "hess" has a default value of <scipy.optimize._hessian_update_strategy.BFGS object at 0x718076291ba0>, which is different from stub argument default None
[1mscipy.optimize._constraints.NonlinearConstraint.__init__(B[m is inconsistent, runtime argument "hess" has a default value of <scipy.optimize._hessian_update_strategy.BFGS object at 0x718076291ba0>, which is different from stub argument default None
[1mscipy.optimize._constraints.__all__(B[m is not present at runtime
[1mscipy.optimize._differentialevolution.NonlinearConstraint.__init__(B[m is inconsistent, runtime argument "hess" has a default value of <scipy.optimize._hessian_update_strategy.BFGS object at 0x718076291ba0>, which is different from stub argument default None
[1mscipy.optimize._elementwise(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy.optimize._elementwise'
[1mscipy.optimize._group_columns.__pythran__(B[m is not present in stub
[1mscipy.optimize._highs.cython(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy.optimize._highs.cython'
[1mscipy.optimize._highs.cython.src(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy.optimize._highs.cython'
[1mscipy.optimize._lbfgsb_py.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.optimize._lbfgsb_py.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.optimize._linprog_util._LPProblem.__new__(B[m is inconsistent, runtime argument "A_ub" has a default value but stub argument does not
[1mscipy.optimize._linprog_util._LPProblem.__new__(B[m is inconsistent, runtime argument "b_ub" has a default value but stub argument does not
[1mscipy.optimize._linprog_util._LPProblem.__new__(B[m is inconsistent, runtime argument "A_eq" has a default value but stub argument does not
[1mscipy.optimize._linprog_util._LPProblem.__new__(B[m is inconsistent, runtime argument "b_eq" has a default value but stub argument does not
[1mscipy.optimize._linprog_util._LPProblem.__new__(B[m is inconsistent, runtime argument "bounds" has a default value but stub argument does not
[1mscipy.optimize._linprog_util._LPProblem.__new__(B[m is inconsistent, runtime argument "x0" has a default value but stub argument does not
[1mscipy.optimize._linprog_util._LPProblem.__new__(B[m is inconsistent, runtime argument "integrality" has a default value but stub argument does not
[1mscipy.optimize._lsap.__all__(B[m is not present at runtime
[1mscipy.optimize._lsq.least_squares(B[m is inconsistent, runtime argument "tr_options" has a default value of {}, which is different from stub argument default None
[1mscipy.optimize._lsq.least_squares(B[m is inconsistent, runtime argument "kwargs" has a default value of {}, which is different from stub argument default None
[1mscipy.optimize._lsq.common.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.optimize._lsq.common.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.optimize._lsq.dogbox.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.optimize._lsq.dogbox.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.optimize._lsq.least_squares.least_squares(B[m is inconsistent, runtime argument "tr_options" has a default value of {}, which is different from stub argument default None
[1mscipy.optimize._lsq.least_squares.least_squares(B[m is inconsistent, runtime argument "kwargs" has a default value of {}, which is different from stub argument default None
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, stub argument "a" differs from runtime argument "overwrite_a"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "lwork"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, runtime argument "lwork" has a default value of type None, which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "mode"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, runtime argument "mode" has a default value of type 'full', which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, stub argument "lwork" differs from runtime argument "pivoting"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, stub argument "lwork" differs from runtime argument "check_finite"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.optimize._lsq.trf.qr(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, stub argument "a" differs from runtime argument "full_matrices"
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "compute_uv"
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "overwrite_a"
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "check_finite"
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "lapack_driver"
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, runtime argument "lapack_driver" has a default value of type 'gesdd', which is incompatible with stub argument type False. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.optimize._lsq.trf.svd(B[m is inconsistent, runtime does not have argument "lapack_driver"
[1mscipy.optimize._nonlin.GenericBroyden.setup(B[m is inconsistent, stub argument "x" differs from runtime argument "x0"
[1mscipy.optimize._nonlin.GenericBroyden.setup(B[m is inconsistent, stub argument "F" differs from runtime argument "f0"
[1mscipy.optimize._nonlin.GenericBroyden.update(B[m is inconsistent, stub argument "F" differs from runtime argument "f"
[1mscipy.optimize._nonlin.Jacobian.dtype(B[m is not present at runtime
[1mscipy.optimize._nonlin.Jacobian.shape(B[m is not present at runtime
[1mscipy.optimize._nonlin.KrylovJacobian.setup(B[m is inconsistent, stub argument "F" differs from runtime argument "f"
[1mscipy.optimize._nonlin.KrylovJacobian.update(B[m is inconsistent, stub argument "F" differs from runtime argument "f"
[1mscipy.optimize._numdiff.approx_derivative(B[m is inconsistent, runtime argument "kwargs" has a default value of {}, which is different from stub argument default None
[1mscipy.optimize._numdiff.check_derivative(B[m is inconsistent, runtime argument "kwargs" has a default value of {}, which is different from stub argument default None
[1mscipy.optimize._remove_redundancy.__all__(B[m is not present at runtime
[1mscipy.optimize._trlib._trlib.__all__(B[m is not present at runtime
[1mscipy.optimize._trustregion_constr._minimize_trustregion_constr(B[m is not present in stub
[1mscipy.optimize._trustregion_constr.minimize_trustregion_constr.LagrangianHessian.__call__(B[m is inconsistent, stub argument "v_ineq" has a default value but runtime argument does not
[1mscipy.optimize._trustregion_constr.minimize_trustregion_constr.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.optimize._trustregion_constr.minimize_trustregion_constr.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.optimize._trustregion_constr.minimize_trustregion_constr.NonlinearConstraint.__init__(B[m is inconsistent, runtime argument "hess" has a default value of <scipy.optimize._hessian_update_strategy.BFGS object at 0x718076291ba0>, which is different from stub argument default None
[1mscipy.optimize._trustregion_constr.projections.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.optimize._trustregion_constr.projections.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.optimize._trustregion_constr.tr_interior_point.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.optimize._trustregion_constr.tr_interior_point.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.optimize._trustregion_exact._minimize_trustregion_exact(B[m is not present in stub
[1mscipy.optimize._trustregion_krylov._minimize_trust_krylov(B[m is not present in stub
[1mscipy.optimize.cobyla.OptimizeResult(B[m is not present in stub
[1mscipy.optimize.cobyla.fmin_cobyla(B[m is not present in stub
[1mscipy.optimize.elementwise(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy.optimize.elementwise'
[1mscipy.optimize.lbfgsb.LbfgsInvHessProduct(B[m is not present in stub
[1mscipy.optimize.lbfgsb.OptimizeResult(B[m is not present in stub
[1mscipy.optimize.lbfgsb.fmin_l_bfgs_b(B[m is not present in stub
[1mscipy.optimize.lbfgsb.zeros(B[m is not present in stub
[1mscipy.optimize.linesearch.line_search(B[m is not present in stub
[1mscipy.optimize.minpack.OptimizeResult(B[m is not present in stub
[1mscipy.optimize.minpack.OptimizeWarning(B[m is not present in stub
[1mscipy.optimize.minpack.curve_fit(B[m is not present in stub
[1mscipy.optimize.minpack.fixed_point(B[m is not present in stub
[1mscipy.optimize.minpack.fsolve(B[m is not present in stub
[1mscipy.optimize.minpack.least_squares(B[m is not present in stub
[1mscipy.optimize.minpack.leastsq(B[m is not present in stub
[1mscipy.optimize.minpack.zeros(B[m is not present in stub
[1mscipy.optimize.nonlin.BroydenFirst(B[m is not present in stub
[1mscipy.optimize.nonlin.InverseJacobian(B[m is not present in stub
[1mscipy.optimize.nonlin.KrylovJacobian(B[m is not present in stub
[1mscipy.optimize.nonlin.anderson(B[m is not present in stub
[1mscipy.optimize.nonlin.broyden1(B[m is not present in stub
[1mscipy.optimize.nonlin.broyden2(B[m is not present in stub
[1mscipy.optimize.nonlin.diagbroyden(B[m is not present in stub
[1mscipy.optimize.nonlin.excitingmixing(B[m is not present in stub
[1mscipy.optimize.nonlin.linearmixing(B[m is not present in stub
[1mscipy.optimize.nonlin.newton_krylov(B[m is not present in stub
[1mscipy.optimize.optimize.OptimizeResult(B[m is not present in stub
[1mscipy.optimize.optimize.OptimizeWarning(B[m is not present in stub
[1mscipy.optimize.optimize.approx_fprime(B[m is not present in stub
[1mscipy.optimize.optimize.bracket(B[m is not present in stub
[1mscipy.optimize.optimize.brent(B[m is not present in stub
[1mscipy.optimize.optimize.brute(B[m is not present in stub
[1mscipy.optimize.optimize.check_grad(B[m is not present in stub
[1mscipy.optimize.optimize.fmin(B[m is not present in stub
[1mscipy.optimize.optimize.fmin_bfgs(B[m is not present in stub
[1mscipy.optimize.optimize.fmin_cg(B[m is not present in stub
[1mscipy.optimize.optimize.fmin_ncg(B[m is not present in stub
[1mscipy.optimize.optimize.fmin_powell(B[m is not present in stub
[1mscipy.optimize.optimize.fminbound(B[m is not present in stub
[1mscipy.optimize.optimize.golden(B[m is not present in stub
[1mscipy.optimize.optimize.line_search(B[m is not present in stub
[1mscipy.optimize.optimize.rosen(B[m is not present in stub
[1mscipy.optimize.optimize.rosen_der(B[m is not present in stub
[1mscipy.optimize.optimize.rosen_hess(B[m is not present in stub
[1mscipy.optimize.optimize.rosen_hess_prod(B[m is not present in stub
[1mscipy.optimize.optimize.show_options(B[m is not present in stub
[1mscipy.optimize.optimize.zeros(B[m is not present in stub
[1mscipy.optimize.slsqp.OptimizeResult(B[m is not present in stub
[1mscipy.optimize.slsqp.fmin_slsqp(B[m is not present in stub
[1mscipy.optimize.slsqp.slsqp(B[m is not present in stub
[1mscipy.optimize.slsqp.zeros(B[m is not present in stub
[1mscipy.optimize.tnc.OptimizeResult(B[m is not present in stub
[1mscipy.optimize.tnc.fmin_tnc(B[m is not present in stub
[1mscipy.optimize.tnc.zeros(B[m is not present in stub
[1mscipy.optimize.zeros.RootResults(B[m is not present in stub
[1mscipy.optimize.zeros.bisect(B[m is not present in stub
[1mscipy.optimize.zeros.brenth(B[m is not present in stub
[1mscipy.optimize.zeros.brentq(B[m is not present in stub
[1mscipy.optimize.zeros.newton(B[m is not present in stub
[1mscipy.optimize.zeros.ridder(B[m is not present in stub
[1mscipy.optimize.zeros.toms748(B[m is not present in stub
[1mscipy.signal.BSpline(B[m is not present at runtime
[1mscipy.signal.EPSILON(B[m is not present at runtime
[1mscipy.signal.LinAlgError(B[m is not present at runtime
[1mscipy.signal.LinAlgWarning(B[m is not present at runtime
[1mscipy.signal.abs(B[m is not present at runtime
[1mscipy.signal.axis_reverse(B[m is not present at runtime
[1mscipy.signal.axis_slice(B[m is not present at runtime
[1mscipy.signal.band_dict(B[m is not present at runtime
[1mscipy.signal.bessel_norms(B[m is not present at runtime
[1mscipy.signal.cascade(B[m is not present in stub
[1mscipy.signal.cmplx_sort(B[m is not present in stub
[1mscipy.signal.collapse_2d(B[m is not present at runtime
[1mscipy.signal.comb(B[m is not present at runtime
[1mscipy.signal.compute_root_from_lambda(B[m is not present at runtime
[1mscipy.signal.const_ext(B[m is not present at runtime
[1mscipy.signal.cwt(B[m is not present in stub
[1mscipy.signal.daub(B[m is not present in stub
[1mscipy.signal.even_ext(B[m is not present at runtime
[1mscipy.signal.fft(B[m is not present at runtime
[1mscipy.signal.filter_dict(B[m is not present at runtime
[1mscipy.signal.float_factorial(B[m is not present at runtime
[1mscipy.signal.hankel(B[m is not present at runtime
[1mscipy.signal.ifft(B[m is not present at runtime
[1mscipy.signal.lstsq(B[m is not present at runtime
[1mscipy.signal.maxflat(B[m is not present at runtime
[1mscipy.signal.morlet(B[m is not present in stub
[1mscipy.signal.morlet2(B[m is not present in stub
[1mscipy.signal.next_fast_len(B[m is not present at runtime
[1mscipy.signal.normalize_axis_index(B[m is not present at runtime
[1mscipy.signal.odd_ext(B[m is not present at runtime
[1mscipy.signal.qmf(B[m is not present in stub
[1mscipy.signal.ricker(B[m is not present in stub
[1mscipy.signal.sinc(B[m is not present at runtime
[1mscipy.signal.solve(B[m is not present at runtime
[1mscipy.signal.symiirorder1_ic(B[m is not present at runtime
[1mscipy.signal.symiirorder2_ic_bwd(B[m is not present at runtime
[1mscipy.signal.symiirorder2_ic_fwd(B[m is not present at runtime
[1mscipy.signal.symiirorder_nd(B[m is not present at runtime
[1mscipy.signal.toeplitz(B[m is not present at runtime
[1mscipy.signal.yulewalk(B[m is not present at runtime
[1mscipy.signal.zero_ext(B[m is not present at runtime
[1mscipy.signal._filter_design.abs(B[m variable differs from runtime type numpy.ufunc
[1mscipy.signal._filter_design.comb(B[m is inconsistent, stub argument "n" differs from runtime argument "N"
[1mscipy.signal._fir_filter_design.solve(B[m is inconsistent, runtime argument "assume_a" has a default value of 'gen', which is different from stub argument default None
[1mscipy.signal._max_len_seq_inner.__pythran__(B[m is not present in stub
[1mscipy.signal._short_time_fft.FFT_MODE_TYPE(B[m is not a Union
[1mscipy.signal._short_time_fft.PAD_TYPE(B[m is not a Union
[1mscipy.signal._signaltools.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.signal._signaltools.cmplx_sort(B[m is not present in stub
[1mscipy.signal._spectral.__pythran__(B[m is not present in stub
[1mscipy.signal._spline.cspline2d(B[m is not present in stub
[1mscipy.signal._spline.qspline2d(B[m is not present in stub
[1mscipy.signal._spline.symiirorder1(B[m is not present in stub
[1mscipy.signal._spline.symiirorder1_ic(B[m is not present at runtime
[1mscipy.signal._spline.symiirorder2(B[m is not present in stub
[1mscipy.signal._spline.symiirorder2_ic_bwd(B[m is not present at runtime
[1mscipy.signal._spline.symiirorder2_ic_fwd(B[m is not present at runtime
[1mscipy.signal._spline_filters(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy.signal._spline_filters'
[1mscipy.signal._wavelets.cascade(B[m is not present in stub
[1mscipy.signal._wavelets.cwt(B[m is not present in stub
[1mscipy.signal._wavelets.daub(B[m is not present in stub
[1mscipy.signal._wavelets.morlet(B[m is not present in stub
[1mscipy.signal._wavelets.morlet2(B[m is not present in stub
[1mscipy.signal._wavelets.qmf(B[m is not present in stub
[1mscipy.signal._wavelets.ricker(B[m is not present in stub
[1mscipy.signal.bsplines.cspline1d(B[m is not present in stub
[1mscipy.signal.bsplines.cspline1d_eval(B[m is not present in stub
[1mscipy.signal.bsplines.cspline2d(B[m is not present in stub
[1mscipy.signal.bsplines.gauss_spline(B[m is not present in stub
[1mscipy.signal.bsplines.qspline1d(B[m is not present in stub
[1mscipy.signal.bsplines.qspline1d_eval(B[m is not present in stub
[1mscipy.signal.bsplines.sepfir2d(B[m is not present in stub
[1mscipy.signal.bsplines.spline_filter(B[m is not present in stub
[1mscipy.signal.filter_design.BadCoefficients(B[m is not present in stub
[1mscipy.signal.filter_design.band_stop_obj(B[m is not present in stub
[1mscipy.signal.filter_design.bessel(B[m is not present in stub
[1mscipy.signal.filter_design.besselap(B[m is not present in stub
[1mscipy.signal.filter_design.bilinear(B[m is not present in stub
[1mscipy.signal.filter_design.bilinear_zpk(B[m is not present in stub
[1mscipy.signal.filter_design.buttap(B[m is not present in stub
[1mscipy.signal.filter_design.butter(B[m is not present in stub
[1mscipy.signal.filter_design.buttord(B[m is not present in stub
[1mscipy.signal.filter_design.cheb1ap(B[m is not present in stub
[1mscipy.signal.filter_design.cheb1ord(B[m is not present in stub
[1mscipy.signal.filter_design.cheb2ap(B[m is not present in stub
[1mscipy.signal.filter_design.cheb2ord(B[m is not present in stub
[1mscipy.signal.filter_design.cheby1(B[m is not present in stub
[1mscipy.signal.filter_design.cheby2(B[m is not present in stub
[1mscipy.signal.filter_design.ellip(B[m is not present in stub
[1mscipy.signal.filter_design.ellipap(B[m is not present in stub
[1mscipy.signal.filter_design.ellipord(B[m is not present in stub
[1mscipy.signal.filter_design.findfreqs(B[m is not present in stub
[1mscipy.signal.filter_design.freqs(B[m is not present in stub
[1mscipy.signal.filter_design.freqs_zpk(B[m is not present in stub
[1mscipy.signal.filter_design.freqz(B[m is not present in stub
[1mscipy.signal.filter_design.freqz_zpk(B[m is not present in stub
[1mscipy.signal.filter_design.gammatone(B[m is not present in stub
[1mscipy.signal.filter_design.group_delay(B[m is not present in stub
[1mscipy.signal.filter_design.iircomb(B[m is not present in stub
[1mscipy.signal.filter_design.iirdesign(B[m is not present in stub
[1mscipy.signal.filter_design.iirfilter(B[m is not present in stub
[1mscipy.signal.filter_design.iirnotch(B[m is not present in stub
[1mscipy.signal.filter_design.iirpeak(B[m is not present in stub
[1mscipy.signal.filter_design.lp2bp(B[m is not present in stub
[1mscipy.signal.filter_design.lp2bp_zpk(B[m is not present in stub
[1mscipy.signal.filter_design.lp2bs(B[m is not present in stub
[1mscipy.signal.filter_design.lp2bs_zpk(B[m is not present in stub
[1mscipy.signal.filter_design.lp2hp(B[m is not present in stub
[1mscipy.signal.filter_design.lp2hp_zpk(B[m is not present in stub
[1mscipy.signal.filter_design.lp2lp(B[m is not present in stub
[1mscipy.signal.filter_design.lp2lp_zpk(B[m is not present in stub
[1mscipy.signal.filter_design.normalize(B[m is not present in stub
[1mscipy.signal.filter_design.sos2tf(B[m is not present in stub
[1mscipy.signal.filter_design.sos2zpk(B[m is not present in stub
[1mscipy.signal.filter_design.sosfreqz(B[m is not present in stub
[1mscipy.signal.filter_design.tf2sos(B[m is not present in stub
[1mscipy.signal.filter_design.tf2zpk(B[m is not present in stub
[1mscipy.signal.filter_design.zpk2sos(B[m is not present in stub
[1mscipy.signal.filter_design.zpk2tf(B[m is not present in stub
[1mscipy.signal.fir_filter_design.firls(B[m is not present in stub
[1mscipy.signal.fir_filter_design.firwin(B[m is not present in stub
[1mscipy.signal.fir_filter_design.firwin2(B[m is not present in stub
[1mscipy.signal.fir_filter_design.kaiser_atten(B[m is not present in stub
[1mscipy.signal.fir_filter_design.kaiser_beta(B[m is not present in stub
[1mscipy.signal.fir_filter_design.kaiserord(B[m is not present in stub
[1mscipy.signal.fir_filter_design.minimum_phase(B[m is not present in stub
[1mscipy.signal.fir_filter_design.remez(B[m is not present in stub
[1mscipy.signal.lti_conversion.abcd_normalize(B[m is not present in stub
[1mscipy.signal.lti_conversion.cont2discrete(B[m is not present in stub
[1mscipy.signal.lti_conversion.normalize(B[m is not present in stub
[1mscipy.signal.lti_conversion.ss2tf(B[m is not present in stub
[1mscipy.signal.lti_conversion.ss2zpk(B[m is not present in stub
[1mscipy.signal.lti_conversion.tf2ss(B[m is not present in stub
[1mscipy.signal.lti_conversion.tf2zpk(B[m is not present in stub
[1mscipy.signal.lti_conversion.zpk2ss(B[m is not present in stub
[1mscipy.signal.lti_conversion.zpk2tf(B[m is not present in stub
[1mscipy.signal.ltisys.StateSpace(B[m is not present in stub
[1mscipy.signal.ltisys.TransferFunction(B[m is not present in stub
[1mscipy.signal.ltisys.ZerosPolesGain(B[m is not present in stub
[1mscipy.signal.ltisys.abcd_normalize(B[m is not present in stub
[1mscipy.signal.ltisys.bode(B[m is not present in stub
[1mscipy.signal.ltisys.cont2discrete(B[m is not present in stub
[1mscipy.signal.ltisys.dbode(B[m is not present in stub
[1mscipy.signal.ltisys.dfreqresp(B[m is not present in stub
[1mscipy.signal.ltisys.dimpulse(B[m is not present in stub
[1mscipy.signal.ltisys.dlsim(B[m is not present in stub
[1mscipy.signal.ltisys.dlti(B[m is not present in stub
[1mscipy.signal.ltisys.dstep(B[m is not present in stub
[1mscipy.signal.ltisys.freqresp(B[m is not present in stub
[1mscipy.signal.ltisys.freqs(B[m is not present in stub
[1mscipy.signal.ltisys.freqs_zpk(B[m is not present in stub
[1mscipy.signal.ltisys.freqz(B[m is not present in stub
[1mscipy.signal.ltisys.freqz_zpk(B[m is not present in stub
[1mscipy.signal.ltisys.impulse(B[m is not present in stub
[1mscipy.signal.ltisys.lsim(B[m is not present in stub
[1mscipy.signal.ltisys.lti(B[m is not present in stub
[1mscipy.signal.ltisys.normalize(B[m is not present in stub
[1mscipy.signal.ltisys.place_poles(B[m is not present in stub
[1mscipy.signal.ltisys.ss2tf(B[m is not present in stub
[1mscipy.signal.ltisys.ss2zpk(B[m is not present in stub
[1mscipy.signal.ltisys.step(B[m is not present in stub
[1mscipy.signal.ltisys.tf2ss(B[m is not present in stub
[1mscipy.signal.ltisys.tf2zpk(B[m is not present in stub
[1mscipy.signal.ltisys.zpk2ss(B[m is not present in stub
[1mscipy.signal.ltisys.zpk2tf(B[m is not present in stub
[1mscipy.signal.signaltools.cheby1(B[m is not present in stub
[1mscipy.signal.signaltools.choose_conv_method(B[m is not present in stub
[1mscipy.signal.signaltools.cmplx_sort(B[m is not present in stub
[1mscipy.signal.signaltools.convolve(B[m is not present in stub
[1mscipy.signal.signaltools.convolve2d(B[m is not present in stub
[1mscipy.signal.signaltools.correlate(B[m is not present in stub
[1mscipy.signal.signaltools.correlate2d(B[m is not present in stub
[1mscipy.signal.signaltools.correlation_lags(B[m is not present in stub
[1mscipy.signal.signaltools.decimate(B[m is not present in stub
[1mscipy.signal.signaltools.deconvolve(B[m is not present in stub
[1mscipy.signal.signaltools.detrend(B[m is not present in stub
[1mscipy.signal.signaltools.dlti(B[m is not present in stub
[1mscipy.signal.signaltools.fftconvolve(B[m is not present in stub
[1mscipy.signal.signaltools.filtfilt(B[m is not present in stub
[1mscipy.signal.signaltools.firwin(B[m is not present in stub
[1mscipy.signal.signaltools.get_window(B[m is not present in stub
[1mscipy.signal.signaltools.hilbert(B[m is not present in stub
[1mscipy.signal.signaltools.hilbert2(B[m is not present in stub
[1mscipy.signal.signaltools.invres(B[m is not present in stub
[1mscipy.signal.signaltools.invresz(B[m is not present in stub
[1mscipy.signal.signaltools.lfilter(B[m is not present in stub
[1mscipy.signal.signaltools.lfilter_zi(B[m is not present in stub
[1mscipy.signal.signaltools.lfiltic(B[m is not present in stub
[1mscipy.signal.signaltools.medfilt(B[m is not present in stub
[1mscipy.signal.signaltools.medfilt2d(B[m is not present in stub
[1mscipy.signal.signaltools.oaconvolve(B[m is not present in stub
[1mscipy.signal.signaltools.order_filter(B[m is not present in stub
[1mscipy.signal.signaltools.resample(B[m is not present in stub
[1mscipy.signal.signaltools.resample_poly(B[m is not present in stub
[1mscipy.signal.signaltools.residue(B[m is not present in stub
[1mscipy.signal.signaltools.residuez(B[m is not present in stub
[1mscipy.signal.signaltools.sosfilt(B[m is not present in stub
[1mscipy.signal.signaltools.sosfilt_zi(B[m is not present in stub
[1mscipy.signal.signaltools.sosfiltfilt(B[m is not present in stub
[1mscipy.signal.signaltools.unique_roots(B[m is not present in stub
[1mscipy.signal.signaltools.upfirdn(B[m is not present in stub
[1mscipy.signal.signaltools.vectorstrength(B[m is not present in stub
[1mscipy.signal.signaltools.wiener(B[m is not present in stub
[1mscipy.signal.spectral.check_COLA(B[m is not present in stub
[1mscipy.signal.spectral.check_NOLA(B[m is not present in stub
[1mscipy.signal.spectral.coherence(B[m is not present in stub
[1mscipy.signal.spectral.csd(B[m is not present in stub
[1mscipy.signal.spectral.get_window(B[m is not present in stub
[1mscipy.signal.spectral.istft(B[m is not present in stub
[1mscipy.signal.spectral.lombscargle(B[m is not present in stub
[1mscipy.signal.spectral.periodogram(B[m is not present in stub
[1mscipy.signal.spectral.spectrogram(B[m is not present in stub
[1mscipy.signal.spectral.stft(B[m is not present in stub
[1mscipy.signal.spectral.welch(B[m is not present in stub
[1mscipy.signal.spline.cspline2d(B[m is not present in stub
[1mscipy.signal.spline.qspline2d(B[m is not present in stub
[1mscipy.signal.spline.sepfir2d(B[m is not present in stub
[1mscipy.signal.spline.symiirorder1(B[m is not present in stub
[1mscipy.signal.spline.symiirorder2(B[m is not present in stub
[1mscipy.signal.waveforms.chirp(B[m is not present in stub
[1mscipy.signal.waveforms.gausspulse(B[m is not present in stub
[1mscipy.signal.waveforms.sawtooth(B[m is not present in stub
[1mscipy.signal.waveforms.square(B[m is not present in stub
[1mscipy.signal.waveforms.sweep_poly(B[m is not present in stub
[1mscipy.signal.waveforms.unit_impulse(B[m is not present in stub
[1mscipy.signal.wavelets.cascade(B[m is not present in stub
[1mscipy.signal.wavelets.convolve(B[m is not present in stub
[1mscipy.signal.wavelets.cwt(B[m is not present in stub
[1mscipy.signal.wavelets.daub(B[m is not present in stub
[1mscipy.signal.wavelets.morlet(B[m is not present in stub
[1mscipy.signal.wavelets.morlet2(B[m is not present in stub
[1mscipy.signal.wavelets.qmf(B[m is not present in stub
[1mscipy.signal.wavelets.ricker(B[m is not present in stub
[1mscipy.signal.windows.windows.barthann(B[m is not present in stub
[1mscipy.signal.windows.windows.bartlett(B[m is not present in stub
[1mscipy.signal.windows.windows.blackman(B[m is not present in stub
[1mscipy.signal.windows.windows.blackmanharris(B[m is not present in stub
[1mscipy.signal.windows.windows.bohman(B[m is not present in stub
[1mscipy.signal.windows.windows.boxcar(B[m is not present in stub
[1mscipy.signal.windows.windows.chebwin(B[m is not present in stub
[1mscipy.signal.windows.windows.cosine(B[m is not present in stub
[1mscipy.signal.windows.windows.dpss(B[m is not present in stub
[1mscipy.signal.windows.windows.exponential(B[m is not present in stub
[1mscipy.signal.windows.windows.flattop(B[m is not present in stub
[1mscipy.signal.windows.windows.gaussian(B[m is not present in stub
[1mscipy.signal.windows.windows.general_cosine(B[m is not present in stub
[1mscipy.signal.windows.windows.general_gaussian(B[m is not present in stub
[1mscipy.signal.windows.windows.general_hamming(B[m is not present in stub
[1mscipy.signal.windows.windows.get_window(B[m is not present in stub
[1mscipy.signal.windows.windows.hamming(B[m is not present in stub
[1mscipy.signal.windows.windows.hann(B[m is not present in stub
[1mscipy.signal.windows.windows.kaiser(B[m is not present in stub
[1mscipy.signal.windows.windows.nuttall(B[m is not present in stub
[1mscipy.signal.windows.windows.parzen(B[m is not present in stub
[1mscipy.signal.windows.windows.taylor(B[m is not present in stub
[1mscipy.signal.windows.windows.triang(B[m is not present in stub
[1mscipy.signal.windows.windows.tukey(B[m is not present in stub
[1mscipy.sparse.PICKLE_KWARGS(B[m is not present at runtime
[1mscipy.sparse.linalg(B[m is not present in stub
[1mscipy.sparse.spmatrix.todense(B[m is not present at runtime
[1mscipy.sparse._base._spbase.__init__(B[m is inconsistent, runtime argument "maxprint" is not keyword-only
[1mscipy.sparse._base._spbase.count_nonzero(B[m is inconsistent, runtime does not have argument "axis"
[1mscipy.sparse._base.spmatrix.todense(B[m is not present at runtime
[1mscipy.sparse._bsr._bsr_base.__init__(B[m is inconsistent, runtime does not have argument "maxprint"
[1mscipy.sparse._bsr._bsr_base.tocoo(B[m is inconsistent, runtime argument "copy" has a default value of True, which is different from stub argument default False
[1mscipy.sparse._compressed._cs_matrix.__init__(B[m is inconsistent, runtime does not have argument "maxprint"
[1mscipy.sparse._compressed._cs_matrix.tocoo(B[m is inconsistent, runtime argument "copy" has a default value of True, which is different from stub argument default False
[1mscipy.sparse._coo._coo_base.__init__(B[m is inconsistent, runtime does not have argument "maxprint"
[1mscipy.sparse._csr._csr_base.tobsr(B[m is inconsistent, runtime argument "copy" has a default value of True, which is different from stub argument default False
[1mscipy.sparse._data._data_matrix.__init__(B[m is inconsistent, runtime does not have argument "maxprint"
[1mscipy.sparse._data._data_matrix.arcsin(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.arcsinh(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.arctan(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.arctanh(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.ceil(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.count_nonzero(B[m is inconsistent, runtime does not have argument "axis"
[1mscipy.sparse._data._data_matrix.deg2rad(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.expm1(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.floor(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.log1p(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.rad2deg(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.rint(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.sign(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.sin(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.sinh(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.sqrt(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.tan(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.tanh(B[m is not present in stub
[1mscipy.sparse._data._data_matrix.trunc(B[m is not present in stub
[1mscipy.sparse._data._minmax_mixin.argmax(B[m is inconsistent, runtime does not have argument "explicit"
[1mscipy.sparse._data._minmax_mixin.argmin(B[m is inconsistent, runtime does not have argument "explicit"
[1mscipy.sparse._data._minmax_mixin.max(B[m is inconsistent, runtime does not have argument "explicit"
[1mscipy.sparse._data._minmax_mixin.min(B[m is inconsistent, runtime does not have argument "explicit"
[1mscipy.sparse._data._minmax_mixin.nanmax(B[m is inconsistent, runtime does not have argument "explicit"
[1mscipy.sparse._data._minmax_mixin.nanmin(B[m is inconsistent, runtime does not have argument "explicit"
[1mscipy.sparse._dia._dia_base.__init__(B[m is inconsistent, runtime does not have argument "maxprint"
[1mscipy.sparse._dia._dia_base.count_nonzero(B[m is inconsistent, runtime does not have argument "axis"
[1mscipy.sparse._dok._dok_base.__init__(B[m is inconsistent, runtime does not have argument "maxprint"
[1mscipy.sparse._dok._dok_base.count_nonzero(B[m is inconsistent, runtime does not have argument "axis"
[1mscipy.sparse._generate_sparsetools(B[m failed to import. Maybe install the runtime package or alter PYTHONPATH? ModuleNotFoundError: No module named 'scipy.sparse._generate_sparsetools'
[1mscipy.sparse._index.INT_TYPES(B[m is not present in stub
[1mscipy.sparse._lil._lil_base.__init__(B[m is inconsistent, runtime does not have argument "maxprint"
[1mscipy.sparse._lil._lil_base.count_nonzero(B[m is inconsistent, runtime does not have argument "axis"
[1mscipy.sparse._matrix.__all__(B[m is not present at runtime
[1mscipy.sparse._matrix.spmatrix.todense(B[m is not present at runtime
[1mscipy.sparse._sputils.convert_pydata_sparse_to_scipy(B[m is inconsistent, runtime does not have argument "accept_fv"
[1mscipy.sparse.base.MAXPRINT(B[m is not present in stub
[1mscipy.sparse.base.SparseEfficiencyWarning(B[m is not present in stub
[1mscipy.sparse.base.SparseFormatWarning(B[m is not present in stub
[1mscipy.sparse.base.SparseWarning(B[m is not present in stub
[1mscipy.sparse.base.asmatrix(B[m is not present in stub
[1mscipy.sparse.base.check_reshape_kwargs(B[m is not present in stub
[1mscipy.sparse.base.check_shape(B[m is not present in stub
[1mscipy.sparse.base.get_sum_dtype(B[m is not present in stub
[1mscipy.sparse.base.isdense(B[m is not present in stub
[1mscipy.sparse.base.isscalarlike(B[m is not present in stub
[1mscipy.sparse.base.issparse(B[m is not present in stub
[1mscipy.sparse.base.isspmatrix(B[m is not present in stub
[1mscipy.sparse.base.spmatrix(B[m is not present in stub
[1mscipy.sparse.base.validateaxis(B[m is not present in stub
[1mscipy.sparse.bsr.bsr_matmat(B[m is not present in stub
[1mscipy.sparse.bsr.bsr_matrix(B[m is not present in stub
[1mscipy.sparse.bsr.bsr_matvec(B[m is not present in stub
[1mscipy.sparse.bsr.bsr_matvecs(B[m is not present in stub
[1mscipy.sparse.bsr.bsr_sort_indices(B[m is not present in stub
[1mscipy.sparse.bsr.bsr_tocsr(B[m is not present in stub
[1mscipy.sparse.bsr.bsr_transpose(B[m is not present in stub
[1mscipy.sparse.bsr.check_shape(B[m is not present in stub
[1mscipy.sparse.bsr.csr_matmat_maxnnz(B[m is not present in stub
[1mscipy.sparse.bsr.getdata(B[m is not present in stub
[1mscipy.sparse.bsr.getdtype(B[m is not present in stub
[1mscipy.sparse.bsr.isshape(B[m is not present in stub
[1mscipy.sparse.bsr.isspmatrix_bsr(B[m is not present in stub
[1mscipy.sparse.bsr.spmatrix(B[m is not present in stub
[1mscipy.sparse.bsr.to_native(B[m is not present in stub
[1mscipy.sparse.bsr.upcast(B[m is not present in stub
[1mscipy.sparse.bsr.warn(B[m is not present in stub
[1mscipy.sparse.compressed.IndexMixin(B[m is not present in stub
[1mscipy.sparse.compressed.SparseEfficiencyWarning(B[m is not present in stub
[1mscipy.sparse.compressed.check_shape(B[m is not present in stub
[1mscipy.sparse.compressed.csr_column_index1(B[m is not present in stub
[1mscipy.sparse.compressed.csr_column_index2(B[m is not present in stub
[1mscipy.sparse.compressed.csr_row_index(B[m is not present in stub
[1mscipy.sparse.compressed.csr_row_slice(B[m is not present in stub
[1mscipy.sparse.compressed.csr_sample_offsets(B[m is not present in stub
[1mscipy.sparse.compressed.csr_sample_values(B[m is not present in stub
[1mscipy.sparse.compressed.csr_todense(B[m is not present in stub
[1mscipy.sparse.compressed.downcast_intp_index(B[m is not present in stub
[1mscipy.sparse.compressed.get_csr_submatrix(B[m is not present in stub
[1mscipy.sparse.compressed.get_sum_dtype(B[m is not present in stub
[1mscipy.sparse.compressed.getdtype(B[m is not present in stub
[1mscipy.sparse.compressed.is_pydata_spmatrix(B[m is not present in stub
[1mscipy.sparse.compressed.isdense(B[m is not present in stub
[1mscipy.sparse.compressed.isintlike(B[m is not present in stub
[1mscipy.sparse.compressed.isscalarlike(B[m is not present in stub
[1mscipy.sparse.compressed.isshape(B[m is not present in stub
[1mscipy.sparse.compressed.operator(B[m is not present in stub
[1mscipy.sparse.compressed.to_native(B[m is not present in stub
[1mscipy.sparse.compressed.upcast(B[m is not present in stub
[1mscipy.sparse.compressed.upcast_char(B[m is not present in stub
[1mscipy.sparse.compressed.warn(B[m is not present in stub
[1mscipy.sparse.construct.block_diag(B[m is not present in stub
[1mscipy.sparse.construct.bmat(B[m is not present in stub
[1mscipy.sparse.construct.bsr_matrix(B[m is not present in stub
[1mscipy.sparse.construct.check_random_state(B[m is not present in stub
[1mscipy.sparse.construct.coo_matrix(B[m is not present in stub
[1mscipy.sparse.construct.csc_matrix(B[m is not present in stub
[1mscipy.sparse.construct.csr_hstack(B[m is not present in stub
[1mscipy.sparse.construct.csr_matrix(B[m is not present in stub
[1mscipy.sparse.construct.dia_matrix(B[m is not present in stub
[1mscipy.sparse.construct.diags(B[m is not present in stub
[1mscipy.sparse.construct.eye(B[m is not present in stub
[1mscipy.sparse.construct.get_index_dtype(B[m is not present in stub
[1mscipy.sparse.construct.hstack(B[m is not present in stub
[1mscipy.sparse.construct.identity(B[m is not present in stub
[1mscipy.sparse.construct.isscalarlike(B[m is not present in stub
[1mscipy.sparse.construct.issparse(B[m is not present in stub
[1mscipy.sparse.construct.kron(B[m is not present in stub
[1mscipy.sparse.construct.kronsum(B[m is not present in stub
[1mscipy.sparse.construct.numbers(B[m is not present in stub
[1mscipy.sparse.construct.rand(B[m is not present in stub
[1mscipy.sparse.construct.random(B[m is not present in stub
[1mscipy.sparse.construct.rng_integers(B[m is not present in stub
[1mscipy.sparse.construct.spdiags(B[m is not present in stub
[1mscipy.sparse.construct.upcast(B[m is not present in stub
[1mscipy.sparse.construct.vstack(B[m is not present in stub
[1mscipy.sparse.coo.SparseEfficiencyWarning(B[m is not present in stub
[1mscipy.sparse.coo.check_reshape_kwargs(B[m is not present in stub
[1mscipy.sparse.coo.check_shape(B[m is not present in stub
[1mscipy.sparse.coo.coo_matrix(B[m is not present in stub
[1mscipy.sparse.coo.coo_matvec(B[m is not present in stub
[1mscipy.sparse.coo.coo_tocsr(B[m is not present in stub
[1mscipy.sparse.coo.coo_todense(B[m is not present in stub
[1mscipy.sparse.coo.downcast_intp_index(B[m is not present in stub
[1mscipy.sparse.coo.getdata(B[m is not present in stub
[1mscipy.sparse.coo.getdtype(B[m is not present in stub
[1mscipy.sparse.coo.isshape(B[m is not present in stub
[1mscipy.sparse.coo.isspmatrix_coo(B[m is not present in stub
[1mscipy.sparse.coo.operator(B[m is not present in stub
[1mscipy.sparse.coo.spmatrix(B[m is not present in stub
[1mscipy.sparse.coo.to_native(B[m is not present in stub
[1mscipy.sparse.coo.upcast(B[m is not present in stub
[1mscipy.sparse.coo.upcast_char(B[m is not present in stub
[1mscipy.sparse.coo.warn(B[m is not present in stub
[1mscipy.sparse.csc.csc_matrix(B[m is not present in stub
[1mscipy.sparse.csc.csc_tocsr(B[m is not present in stub
[1mscipy.sparse.csc.expandptr(B[m is not present in stub
[1mscipy.sparse.csc.isspmatrix_csc(B[m is not present in stub
[1mscipy.sparse.csc.spmatrix(B[m is not present in stub
[1mscipy.sparse.csc.upcast(B[m is not present in stub
[1mscipy.sparse.csgraph.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.sparse.csgraph.NegativeCycleError.__init__(B[m is inconsistent, stub does not have argument "message"
[1mscipy.sparse.csgraph.NegativeCycleError.__init__(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.bellman_ford(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.bellman_ford(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.bellman_ford(B[m is inconsistent, stub does not have argument "indices"
[1mscipy.sparse.csgraph.bellman_ford(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph.bellman_ford(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph.bellman_ford(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.bellman_ford(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.breadth_first_order(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.breadth_first_order(B[m is inconsistent, stub does not have argument "i_start"
[1mscipy.sparse.csgraph.breadth_first_order(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.breadth_first_order(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph.breadth_first_order(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.breadth_first_order(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.breadth_first_tree(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.breadth_first_tree(B[m is inconsistent, stub does not have argument "i_start"
[1mscipy.sparse.csgraph.breadth_first_tree(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.breadth_first_tree(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.breadth_first_tree(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.connected_components(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.connected_components(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.connected_components(B[m is inconsistent, stub does not have argument "connection"
[1mscipy.sparse.csgraph.connected_components(B[m is inconsistent, stub does not have argument "return_labels"
[1mscipy.sparse.csgraph.connected_components(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.connected_components(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.construct_dist_matrix(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph.construct_dist_matrix(B[m is inconsistent, stub does not have argument "predecessors"
[1mscipy.sparse.csgraph.construct_dist_matrix(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.construct_dist_matrix(B[m is inconsistent, stub does not have argument "null_value"
[1mscipy.sparse.csgraph.construct_dist_matrix(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.construct_dist_matrix(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.csgraph_from_dense(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph.csgraph_from_dense(B[m is inconsistent, stub does not have argument "null_value"
[1mscipy.sparse.csgraph.csgraph_from_dense(B[m is inconsistent, stub does not have argument "nan_null"
[1mscipy.sparse.csgraph.csgraph_from_dense(B[m is inconsistent, stub does not have argument "infinity_null"
[1mscipy.sparse.csgraph.csgraph_from_dense(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.csgraph_from_dense(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.csgraph_from_masked(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph.csgraph_from_masked(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.csgraph_from_masked(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "null_value"
[1mscipy.sparse.csgraph.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "nan_null"
[1mscipy.sparse.csgraph.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "infinity_null"
[1mscipy.sparse.csgraph.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "copy"
[1mscipy.sparse.csgraph.csgraph_masked_from_dense(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.csgraph_masked_from_dense(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.csgraph_to_dense(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.csgraph_to_dense(B[m is inconsistent, stub does not have argument "null_value"
[1mscipy.sparse.csgraph.csgraph_to_dense(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.csgraph_to_dense(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.csgraph_to_masked(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.csgraph_to_masked(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.csgraph_to_masked(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.depth_first_order(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.depth_first_order(B[m is inconsistent, stub does not have argument "i_start"
[1mscipy.sparse.csgraph.depth_first_order(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.depth_first_order(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph.depth_first_order(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.depth_first_order(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.depth_first_tree(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.depth_first_tree(B[m is inconsistent, stub does not have argument "i_start"
[1mscipy.sparse.csgraph.depth_first_tree(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.depth_first_tree(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.depth_first_tree(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, stub does not have argument "indices"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, stub does not have argument "limit"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, stub does not have argument "min_only"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.dijkstra(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.floyd_warshall(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.floyd_warshall(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.floyd_warshall(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph.floyd_warshall(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph.floyd_warshall(B[m is inconsistent, stub does not have argument "overwrite"
[1mscipy.sparse.csgraph.floyd_warshall(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.floyd_warshall(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.johnson(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.johnson(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.johnson(B[m is inconsistent, stub does not have argument "indices"
[1mscipy.sparse.csgraph.johnson(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph.johnson(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph.johnson(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.johnson(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.maximum_bipartite_matching(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph.maximum_bipartite_matching(B[m is inconsistent, stub does not have argument "perm_type"
[1mscipy.sparse.csgraph.maximum_bipartite_matching(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.maximum_bipartite_matching(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.maximum_flow(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.maximum_flow(B[m is inconsistent, stub does not have argument "source"
[1mscipy.sparse.csgraph.maximum_flow(B[m is inconsistent, stub does not have argument "sink"
[1mscipy.sparse.csgraph.maximum_flow(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.maximum_flow(B[m is inconsistent, stub does not have argument "method"
[1mscipy.sparse.csgraph.maximum_flow(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.min_weight_full_bipartite_matching(B[m is inconsistent, stub does not have argument "biadjacency_matrix"
[1mscipy.sparse.csgraph.min_weight_full_bipartite_matching(B[m is inconsistent, stub does not have argument "maximize"
[1mscipy.sparse.csgraph.min_weight_full_bipartite_matching(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.min_weight_full_bipartite_matching(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.minimum_spanning_tree(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.minimum_spanning_tree(B[m is inconsistent, stub does not have argument "overwrite"
[1mscipy.sparse.csgraph.minimum_spanning_tree(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.minimum_spanning_tree(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.reconstruct_path(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.reconstruct_path(B[m is inconsistent, stub does not have argument "predecessors"
[1mscipy.sparse.csgraph.reconstruct_path(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.reconstruct_path(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.reconstruct_path(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.reverse_cuthill_mckee(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph.reverse_cuthill_mckee(B[m is inconsistent, stub does not have argument "symmetric_mode"
[1mscipy.sparse.csgraph.reverse_cuthill_mckee(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.reverse_cuthill_mckee(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, stub does not have argument "method"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, stub does not have argument "overwrite"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, stub does not have argument "indices"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.shortest_path(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.structural_rank(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph.structural_rank(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.structural_rank(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, stub does not have argument "source"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, stub does not have argument "sink"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, stub does not have argument "K"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph.yen(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._flow.MaximumFlowResult(B[m is not present in stub
[1mscipy.sparse.csgraph._flow.__all__(B[m is not present at runtime
[1mscipy.sparse.csgraph._flow.maximum_flow(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._flow.maximum_flow(B[m is inconsistent, stub does not have argument "source"
[1mscipy.sparse.csgraph._flow.maximum_flow(B[m is inconsistent, stub does not have argument "sink"
[1mscipy.sparse.csgraph._flow.maximum_flow(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._flow.maximum_flow(B[m is inconsistent, stub does not have argument "method"
[1mscipy.sparse.csgraph._flow.maximum_flow(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._laplacian.__all__(B[m is not present at runtime
[1mscipy.sparse.csgraph._matching.__all__(B[m is not present at runtime
[1mscipy.sparse.csgraph._matching.maximum_bipartite_matching(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph._matching.maximum_bipartite_matching(B[m is inconsistent, stub does not have argument "perm_type"
[1mscipy.sparse.csgraph._matching.maximum_bipartite_matching(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._matching.maximum_bipartite_matching(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._matching.min_weight_full_bipartite_matching(B[m is inconsistent, stub does not have argument "biadjacency_matrix"
[1mscipy.sparse.csgraph._matching.min_weight_full_bipartite_matching(B[m is inconsistent, stub does not have argument "maximize"
[1mscipy.sparse.csgraph._matching.min_weight_full_bipartite_matching(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._matching.min_weight_full_bipartite_matching(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._min_spanning_tree.__all__(B[m is not present at runtime
[1mscipy.sparse.csgraph._min_spanning_tree.minimum_spanning_tree(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._min_spanning_tree.minimum_spanning_tree(B[m is inconsistent, stub does not have argument "overwrite"
[1mscipy.sparse.csgraph._min_spanning_tree.minimum_spanning_tree(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._min_spanning_tree.minimum_spanning_tree(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._reordering.__all__(B[m is not present at runtime
[1mscipy.sparse.csgraph._reordering.reverse_cuthill_mckee(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph._reordering.reverse_cuthill_mckee(B[m is inconsistent, stub does not have argument "symmetric_mode"
[1mscipy.sparse.csgraph._reordering.reverse_cuthill_mckee(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._reordering.reverse_cuthill_mckee(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._reordering.structural_rank(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph._reordering.structural_rank(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._reordering.structural_rank(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._shortest_path.NegativeCycleError.__init__(B[m is inconsistent, stub does not have argument "message"
[1mscipy.sparse.csgraph._shortest_path.NegativeCycleError.__init__(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._shortest_path.__test__(B[m is not present in stub
[1mscipy.sparse.csgraph._shortest_path.bellman_ford(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._shortest_path.bellman_ford(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._shortest_path.bellman_ford(B[m is inconsistent, stub does not have argument "indices"
[1mscipy.sparse.csgraph._shortest_path.bellman_ford(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph._shortest_path.bellman_ford(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph._shortest_path.bellman_ford(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._shortest_path.bellman_ford(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, stub does not have argument "indices"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, stub does not have argument "limit"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, stub does not have argument "min_only"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._shortest_path.dijkstra(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._shortest_path.floyd_warshall(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._shortest_path.floyd_warshall(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._shortest_path.floyd_warshall(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph._shortest_path.floyd_warshall(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph._shortest_path.floyd_warshall(B[m is inconsistent, stub does not have argument "overwrite"
[1mscipy.sparse.csgraph._shortest_path.floyd_warshall(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._shortest_path.floyd_warshall(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._shortest_path.johnson(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._shortest_path.johnson(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._shortest_path.johnson(B[m is inconsistent, stub does not have argument "indices"
[1mscipy.sparse.csgraph._shortest_path.johnson(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph._shortest_path.johnson(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph._shortest_path.johnson(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._shortest_path.johnson(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, stub does not have argument "method"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, stub does not have argument "overwrite"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, stub does not have argument "indices"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._shortest_path.shortest_path(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, stub does not have argument "source"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, stub does not have argument "sink"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, stub does not have argument "K"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, stub does not have argument "unweighted"
[1mscipy.sparse.csgraph._shortest_path.yen(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._tools.__all__(B[m is not present at runtime
[1mscipy.sparse.csgraph._tools.construct_dist_matrix(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph._tools.construct_dist_matrix(B[m is inconsistent, stub does not have argument "predecessors"
[1mscipy.sparse.csgraph._tools.construct_dist_matrix(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._tools.construct_dist_matrix(B[m is inconsistent, stub does not have argument "null_value"
[1mscipy.sparse.csgraph._tools.construct_dist_matrix(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._tools.construct_dist_matrix(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._tools.csgraph_from_dense(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph._tools.csgraph_from_dense(B[m is inconsistent, stub does not have argument "null_value"
[1mscipy.sparse.csgraph._tools.csgraph_from_dense(B[m is inconsistent, stub does not have argument "nan_null"
[1mscipy.sparse.csgraph._tools.csgraph_from_dense(B[m is inconsistent, stub does not have argument "infinity_null"
[1mscipy.sparse.csgraph._tools.csgraph_from_dense(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._tools.csgraph_from_dense(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._tools.csgraph_from_masked(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph._tools.csgraph_from_masked(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._tools.csgraph_from_masked(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._tools.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "graph"
[1mscipy.sparse.csgraph._tools.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "null_value"
[1mscipy.sparse.csgraph._tools.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "nan_null"
[1mscipy.sparse.csgraph._tools.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "infinity_null"
[1mscipy.sparse.csgraph._tools.csgraph_masked_from_dense(B[m is inconsistent, stub does not have argument "copy"
[1mscipy.sparse.csgraph._tools.csgraph_masked_from_dense(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._tools.csgraph_masked_from_dense(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._tools.csgraph_to_dense(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._tools.csgraph_to_dense(B[m is inconsistent, stub does not have argument "null_value"
[1mscipy.sparse.csgraph._tools.csgraph_to_dense(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._tools.csgraph_to_dense(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._tools.csgraph_to_masked(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._tools.csgraph_to_masked(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._tools.csgraph_to_masked(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._tools.reconstruct_path(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._tools.reconstruct_path(B[m is inconsistent, stub does not have argument "predecessors"
[1mscipy.sparse.csgraph._tools.reconstruct_path(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._tools.reconstruct_path(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._tools.reconstruct_path(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._traversal.__all__(B[m is not present at runtime
[1mscipy.sparse.csgraph._traversal.breadth_first_order(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._traversal.breadth_first_order(B[m is inconsistent, stub does not have argument "i_start"
[1mscipy.sparse.csgraph._traversal.breadth_first_order(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._traversal.breadth_first_order(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph._traversal.breadth_first_order(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._traversal.breadth_first_order(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._traversal.breadth_first_tree(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._traversal.breadth_first_tree(B[m is inconsistent, stub does not have argument "i_start"
[1mscipy.sparse.csgraph._traversal.breadth_first_tree(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._traversal.breadth_first_tree(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._traversal.breadth_first_tree(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._traversal.connected_components(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._traversal.connected_components(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._traversal.connected_components(B[m is inconsistent, stub does not have argument "connection"
[1mscipy.sparse.csgraph._traversal.connected_components(B[m is inconsistent, stub does not have argument "return_labels"
[1mscipy.sparse.csgraph._traversal.connected_components(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._traversal.connected_components(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._traversal.depth_first_order(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._traversal.depth_first_order(B[m is inconsistent, stub does not have argument "i_start"
[1mscipy.sparse.csgraph._traversal.depth_first_order(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._traversal.depth_first_order(B[m is inconsistent, stub does not have argument "return_predecessors"
[1mscipy.sparse.csgraph._traversal.depth_first_order(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._traversal.depth_first_order(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._traversal.depth_first_tree(B[m is inconsistent, stub does not have argument "csgraph"
[1mscipy.sparse.csgraph._traversal.depth_first_tree(B[m is inconsistent, stub does not have argument "i_start"
[1mscipy.sparse.csgraph._traversal.depth_first_tree(B[m is inconsistent, stub does not have argument "directed"
[1mscipy.sparse.csgraph._traversal.depth_first_tree(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.sparse.csgraph._traversal.depth_first_tree(B[m is inconsistent, runtime does not have **kwargs argument "kwargs"
[1mscipy.sparse.csgraph._validation.DTYPE(B[m variable differs from runtime type type
[1mscipy.sparse.csr.csr_count_blocks(B[m is not present in stub
[1mscipy.sparse.csr.csr_matrix(B[m is not present in stub
[1mscipy.sparse.csr.csr_tobsr(B[m is not present in stub
[1mscipy.sparse.csr.csr_tocsc(B[m is not present in stub
[1mscipy.sparse.csr.get_csr_submatrix(B[m is not present in stub
[1mscipy.sparse.csr.isspmatrix_csr(B[m is not present in stub
[1mscipy.sparse.csr.spmatrix(B[m is not present in stub
[1mscipy.sparse.csr.upcast(B[m is not present in stub
[1mscipy.sparse.data.isscalarlike(B[m is not present in stub
[1mscipy.sparse.data.name(B[m is not present in stub
[1mscipy.sparse.data.npfunc(B[m is not present in stub
[1mscipy.sparse.data.validateaxis(B[m is not present in stub
[1mscipy.sparse.dia.check_shape(B[m is not present in stub
[1mscipy.sparse.dia.dia_matrix(B[m is not present in stub
[1mscipy.sparse.dia.dia_matvec(B[m is not present in stub
[1mscipy.sparse.dia.get_sum_dtype(B[m is not present in stub
[1mscipy.sparse.dia.getdtype(B[m is not present in stub
[1mscipy.sparse.dia.isshape(B[m is not present in stub
[1mscipy.sparse.dia.isspmatrix_dia(B[m is not present in stub
[1mscipy.sparse.dia.spmatrix(B[m is not present in stub
[1mscipy.sparse.dia.upcast_char(B[m is not present in stub
[1mscipy.sparse.dia.validateaxis(B[m is not present in stub
[1mscipy.sparse.dok.IndexMixin(B[m is not present in stub
[1mscipy.sparse.dok.check_shape(B[m is not present in stub
[1mscipy.sparse.dok.dok_matrix(B[m is not present in stub
[1mscipy.sparse.dok.getdtype(B[m is not present in stub
[1mscipy.sparse.dok.isdense(B[m is not present in stub
[1mscipy.sparse.dok.isintlike(B[m is not present in stub
[1mscipy.sparse.dok.isscalarlike(B[m is not present in stub
[1mscipy.sparse.dok.isshape(B[m is not present in stub
[1mscipy.sparse.dok.isspmatrix_dok(B[m is not present in stub
[1mscipy.sparse.dok.itertools(B[m is not present in stub
[1mscipy.sparse.dok.spmatrix(B[m is not present in stub
[1mscipy.sparse.dok.upcast(B[m is not present in stub
[1mscipy.sparse.dok.upcast_scalar(B[m is not present in stub
[1mscipy.sparse.extract.coo_matrix(B[m is not present in stub
[1mscipy.sparse.extract.find(B[m is not present in stub
[1mscipy.sparse.extract.tril(B[m is not present in stub
[1mscipy.sparse.extract.triu(B[m is not present in stub
[1mscipy.sparse.lil.isspmatrix_lil(B[m is not present in stub
[1mscipy.sparse.lil.lil_array(B[m is not present in stub
[1mscipy.sparse.lil.lil_matrix(B[m is not present in stub
[1mscipy.sparse.linalg.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.sparse.linalg.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.sparse.linalg.MatrixRankWarning(B[m is not present in stub
[1mscipy.sparse.linalg.SuperLU(B[m cannot be subclassed at runtime, but isn't marked with @final in the stub
[1mscipy.sparse.linalg.factorized(B[m is not present in stub
[1mscipy.sparse.linalg.get_lapack_funcs(B[m is not present at runtime
[1mscipy.sparse.linalg.make_system(B[m is not present at runtime
[1mscipy.sparse.linalg.spilu(B[m is not present in stub
[1mscipy.sparse.linalg.splu(B[m is not present in stub
[1mscipy.sparse.linalg.spsolve(B[m is not present in stub
[1mscipy.sparse.linalg.spsolve_triangular(B[m is not present in stub
[1mscipy.sparse.linalg.use_solver(B[m is not present in stub
[1mscipy.sparse.linalg._dsolve.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.sparse.linalg._dsolve.SuperLU(B[m cannot be subclassed at runtime, but isn't marked with @final in the stub
[1mscipy.sparse.linalg._dsolve.splu(B[m is inconsistent, runtime argument "options" has a default value of {}, which is different from stub argument default None
[1mscipy.sparse.linalg._dsolve._superlu.SuperLU(B[m cannot be subclassed at runtime, but isn't marked with @final in the stub
[1mscipy.sparse.linalg._dsolve._superlu.__all__(B[m is not present at runtime
[1mscipy.sparse.linalg._dsolve._superlu.gssv(B[m is not present in stub
[1mscipy.sparse.linalg._dsolve._superlu.gstrf(B[m is not present in stub
[1mscipy.sparse.linalg._dsolve._superlu.gstrs(B[m is not present in stub
[1mscipy.sparse.linalg._dsolve.linsolve.splu(B[m is inconsistent, runtime argument "options" has a default value of {}, which is different from stub argument default None
[1mscipy.sparse.linalg._eigen.LinAlgError(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.LinearOperator(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.cho_factor(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.cho_solve(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.cholesky(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.eigh(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.inv(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.issparse(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen._svds.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.sparse.linalg._eigen._svds.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, stub argument "a" differs from runtime argument "full_matrices"
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "compute_uv"
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "overwrite_a"
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "check_finite"
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "lapack_driver"
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, runtime argument "lapack_driver" has a default value of type 'gesdd', which is incompatible with stub argument type False. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.sparse.linalg._eigen._svds.svd(B[m is inconsistent, runtime does not have argument "lapack_driver"
[1mscipy.sparse.linalg._eigen.arpack.arpack._SymmetricArpackParams.iterate(B[m is not present in stub
[1mscipy.sparse.linalg._eigen.arpack.arpack._UnsymmetricArpackParams.iterate(B[m is not present in stub
[1mscipy.sparse.linalg._eigen.lobpcg.LinAlgError(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.lobpcg.LinearOperator(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.lobpcg.cho_factor(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.lobpcg.cho_solve(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.lobpcg.cholesky(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.lobpcg.eigh(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.lobpcg.inv(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.lobpcg.issparse(B[m is not present at runtime
[1mscipy.sparse.linalg._eigen.lobpcg.lobpcg.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.sparse.linalg._eigen.lobpcg.lobpcg.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.sparse.linalg._interface.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.sparse.linalg._interface.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.sparse.linalg._isolve.LinearOperator(B[m is not present at runtime
[1mscipy.sparse.linalg._isolve.get_lapack_funcs(B[m is not present at runtime
[1mscipy.sparse.linalg._isolve.make_system(B[m is not present at runtime
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, stub argument "a" differs from runtime argument "overwrite_a"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "lwork"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, runtime argument "lwork" has a default value of type None, which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, stub argument "overwrite_a" differs from runtime argument "mode"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, runtime argument "mode" has a default value of type 'full', which is incompatible with stub argument type bool. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, stub argument "lwork" differs from runtime argument "pivoting"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, stub argument "lwork" differs from runtime argument "check_finite"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, runtime does not have argument "mode"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, runtime does not have argument "pivoting"
[1mscipy.sparse.linalg._isolve._gcrotmk.qr(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.sparse.linalg._isolve._gcrotmk.solve(B[m is inconsistent, runtime argument "assume_a" has a default value of 'gen', which is different from stub argument default None
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, stub argument "a" has a default value but runtime argument does not
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, stub argument "a" differs from runtime argument "full_matrices"
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "compute_uv"
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, stub argument "full_matrices" differs from runtime argument "overwrite_a"
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "check_finite"
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, stub argument "compute_uv" differs from runtime argument "lapack_driver"
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, runtime argument "lapack_driver" has a default value of type 'gesdd', which is incompatible with stub argument type False. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, runtime does not have argument "overwrite_a"
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, runtime does not have argument "check_finite"
[1mscipy.sparse.linalg._isolve._gcrotmk.svd(B[m is inconsistent, runtime does not have argument "lapack_driver"
[1mscipy.sparse.linalg._isolve.iterative.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.sparse.linalg._isolve.iterative.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.sparse.linalg._isolve.lsqr.convert_pydata_sparse_to_scipy(B[m is not present at runtime
[1mscipy.sparse.linalg._isolve.utils.LinearOperator.__new__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.sparse.linalg._isolve.utils.LinearOperator.dtype(B[m is not present at runtime
[1mscipy.sparse.linalg._onenormest.sign_round_up(B[m is inconsistent, stub argument "X" differs from runtime argument "x"
[1mscipy.sparse.linalg._svdp._svdp(B[m is not present in stub
[1mscipy.sparse.linalg.dsolve.MatrixRankWarning(B[m is not present in stub
[1mscipy.sparse.linalg.dsolve.SuperLU(B[m is not present in stub
[1mscipy.sparse.linalg.dsolve.factorized(B[m is not present in stub
[1mscipy.sparse.linalg.dsolve.spilu(B[m is not present in stub
[1mscipy.sparse.linalg.dsolve.splu(B[m is not present in stub
[1mscipy.sparse.linalg.dsolve.spsolve(B[m is not present in stub
[1mscipy.sparse.linalg.dsolve.spsolve_triangular(B[m is not present in stub
[1mscipy.sparse.linalg.dsolve.use_solver(B[m is not present in stub
[1mscipy.sparse.linalg.eigen.ArpackError(B[m is not present in stub
[1mscipy.sparse.linalg.eigen.ArpackNoConvergence(B[m is not present in stub
[1mscipy.sparse.linalg.eigen.eigs(B[m is not present in stub
[1mscipy.sparse.linalg.eigen.eigsh(B[m is not present in stub
[1mscipy.sparse.linalg.eigen.lobpcg(B[m is not present in stub
[1mscipy.sparse.linalg.eigen.svds(B[m is not present in stub
[1mscipy.sparse.linalg.interface.LinearOperator(B[m is not present in stub
[1mscipy.sparse.linalg.interface.aslinearoperator(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.bicg(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.bicgstab(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.cg(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.cgs(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.gcrotmk(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.gmres(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.lgmres(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.lsmr(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.lsqr(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.minres(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.qmr(B[m is not present in stub
[1mscipy.sparse.linalg.isolve.tfqmr(B[m is not present in stub
[1mscipy.sparse.linalg.matfuncs.LinearOperator(B[m is not present in stub
[1mscipy.sparse.linalg.matfuncs.expm(B[m is not present in stub
[1mscipy.sparse.linalg.matfuncs.inv(B[m is not present in stub
[1mscipy.sparse.linalg.matfuncs.spsolve(B[m is not present in stub
[1mscipy.spatial.Delaunay.find_simplex(B[m is inconsistent, runtime argument "tol" has a default value of type None, which is incompatible with stub argument type float
[1mscipy.spatial.KDTree.__init__(B[m is inconsistent, stub does not have argument "data"
[1mscipy.spatial.KDTree.__init__(B[m is inconsistent, stub does not have argument "leafsize"
[1mscipy.spatial.KDTree.__init__(B[m is inconsistent, stub does not have argument "compact_nodes"
[1mscipy.spatial.KDTree.__init__(B[m is inconsistent, stub does not have argument "copy_data"
[1mscipy.spatial.KDTree.__init__(B[m is inconsistent, stub does not have argument "balanced_tree"
[1mscipy.spatial.KDTree.__init__(B[m is inconsistent, stub does not have argument "boxsize"
[1mscipy.spatial.KDTree.query_ball_tree(B[m is inconsistent, runtime argument "p" has a default value but stub argument does not
[1mscipy.spatial.cKDTree.__init__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.spatial.cKDTree.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial.cKDTree.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial.cKDTree.query_ball_tree(B[m is inconsistent, runtime argument "p" has a default value but stub argument does not
[1mscipy.spatial._ckdtree.cKDTree.__init__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.spatial._ckdtree.cKDTree.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial._ckdtree.cKDTree.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial._ckdtree.cKDTree.query_ball_tree(B[m is inconsistent, runtime argument "p" has a default value but stub argument does not
[1mscipy.spatial._ckdtree.cKDTreeNode.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial._ckdtree.cKDTreeNode.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial._kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "data"
[1mscipy.spatial._kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "leafsize"
[1mscipy.spatial._kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "compact_nodes"
[1mscipy.spatial._kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "copy_data"
[1mscipy.spatial._kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "balanced_tree"
[1mscipy.spatial._kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "boxsize"
[1mscipy.spatial._kdtree.KDTree.query_ball_tree(B[m is inconsistent, runtime argument "p" has a default value but stub argument does not
[1mscipy.spatial._qhull.Delaunay.find_simplex(B[m is inconsistent, runtime argument "tol" has a default value of type None, which is incompatible with stub argument type float
[1mscipy.spatial._qhull._Qhull.add_points(B[m is inconsistent, runtime argument "interior_point" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | bool | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]
[1mscipy.spatial._qhull._QhullUser.__del__(B[m is not present in stub
[1mscipy.spatial._qhull._QhullUser._add_points(B[m is inconsistent, runtime argument "interior_point" has a default value of type None, which is incompatible with stub argument type numpy._typing._array_like._SupportsArray[numpy.dtype[Any]] | numpy._typing._nested_sequence._NestedSequence[numpy._typing._array_like._SupportsArray[numpy.dtype[Any]]] | bool | int | float | complex | str | bytes | numpy._typing._nested_sequence._NestedSequence[bool | int | float | complex | str | bytes]
[1mscipy.spatial._spherical_voronoi.cKDTree.__init__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.spatial._spherical_voronoi.cKDTree.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial._spherical_voronoi.cKDTree.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial._spherical_voronoi.cKDTree.query_ball_tree(B[m is inconsistent, runtime argument "p" has a default value but stub argument does not
[1mscipy.spatial.ckdtree.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.spatial.ckdtree.cKDTree.__init__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.spatial.ckdtree.cKDTree.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial.ckdtree.cKDTree.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial.ckdtree.cKDTree.query_ball_tree(B[m is inconsistent, runtime argument "p" has a default value but stub argument does not
[1mscipy.spatial.distance.jensenshannon(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.spatial.distance.jensenshannon(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.spatial.distance.kulczynski1(B[m is inconsistent, stub argument "w" is not keyword-only
[1mscipy.spatial.kdtree.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.spatial.kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "data"
[1mscipy.spatial.kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "leafsize"
[1mscipy.spatial.kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "compact_nodes"
[1mscipy.spatial.kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "copy_data"
[1mscipy.spatial.kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "balanced_tree"
[1mscipy.spatial.kdtree.KDTree.__init__(B[m is inconsistent, stub does not have argument "boxsize"
[1mscipy.spatial.kdtree.KDTree.query_ball_tree(B[m is inconsistent, runtime argument "p" has a default value but stub argument does not
[1mscipy.spatial.kdtree.cKDTree.__init__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.spatial.kdtree.cKDTree.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial.kdtree.cKDTree.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial.kdtree.cKDTree.query_ball_tree(B[m is inconsistent, runtime argument "p" has a default value but stub argument does not
[1mscipy.spatial.qhull.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.spatial.qhull.Delaunay.find_simplex(B[m is inconsistent, runtime argument "tol" has a default value of type None, which is incompatible with stub argument type float
[1mscipy.spatial.transform.Rotation.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial.transform.Rotation.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial.transform.Rotation.approx_equal(B[m is inconsistent, runtime argument "atol" has a default value but stub argument does not
[1mscipy.spatial.transform._rotation.Rotation.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial.transform._rotation.Rotation.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial.transform._rotation.Rotation.approx_equal(B[m is inconsistent, runtime argument "atol" has a default value but stub argument does not
[1mscipy.spatial.transform._rotation.__all__(B[m is not present at runtime
[1mscipy.spatial.transform._rotation_spline.__all__(B[m is not present at runtime
[1mscipy.spatial.transform.rotation.Rotation.__reduce_cython__(B[m is not present in stub
[1mscipy.spatial.transform.rotation.Rotation.__setstate_cython__(B[m is not present in stub
[1mscipy.spatial.transform.rotation.Rotation.approx_equal(B[m is inconsistent, runtime argument "atol" has a default value but stub argument does not
[1mscipy.spatial.transform.rotation.__all__(B[m variable differs from runtime type list[Untyped]
[1mscipy.special.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.special.btdtr(B[m variable differs from runtime type def (*args: Untyped, **kwargs: Untyped) -> Untyped
[1mscipy.special.btdtri(B[m variable differs from runtime type def (*args: Untyped, **kwargs: Untyped) -> Untyped
[1mscipy.special.comb(B[m is inconsistent, stub argument "n" differs from runtime argument "N"
[1mscipy.special.factorial(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.special.factorial2(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.special.factorialk(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.special.perm(B[m is inconsistent, stub argument "n" differs from runtime argument "N"
[1mscipy.special.perm(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.special._add_newdocs.__all__(B[m is not present at runtime
[1mscipy.special._basic.comb(B[m is inconsistent, stub argument "n" differs from runtime argument "N"
[1mscipy.special._basic.factorial(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.special._basic.factorial2(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.special._basic.factorialk(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.special._basic.perm(B[m is inconsistent, stub argument "n" differs from runtime argument "N"
[1mscipy.special._basic.perm(B[m is inconsistent, runtime argument "exact" is not keyword-only
[1mscipy.special._ellip_harm.__all__(B[m is not present at runtime
[1mscipy.special._lambertw.__all__(B[m is not present at runtime
[1mscipy.special._orthogonal.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.special._orthogonal.c_roots(B[m is not present in stub
[1mscipy.special._orthogonal.cg_roots(B[m is not present in stub
[1mscipy.special._orthogonal.h_roots(B[m is not present in stub
[1mscipy.special._orthogonal.he_roots(B[m is not present in stub
[1mscipy.special._orthogonal.j_roots(B[m is not present in stub
[1mscipy.special._orthogonal.js_roots(B[m is not present in stub
[1mscipy.special._orthogonal.l_roots(B[m is not present in stub
[1mscipy.special._orthogonal.la_roots(B[m is not present in stub
[1mscipy.special._orthogonal.orthopoly1d.__call__(B[m is inconsistent, stub argument "val" differs from runtime argument "v"
[1mscipy.special._orthogonal.orthopoly1d.__init__(B[m is inconsistent, runtime argument "weights" has a default value but stub argument does not
[1mscipy.special._orthogonal.orthopoly1d.__init__(B[m is inconsistent, runtime argument "eval_func" has a default value of type None, which is incompatible with stub argument type numpy.ufunc
[1mscipy.special._orthogonal.orthopoly1d.limits(B[m is not present at runtime
[1mscipy.special._orthogonal.orthopoly1d.weight_func(B[m is not present at runtime
[1mscipy.special._orthogonal.p_roots(B[m is not present in stub
[1mscipy.special._orthogonal.ps_roots(B[m is not present in stub
[1mscipy.special._orthogonal.s_roots(B[m is not present in stub
[1mscipy.special._orthogonal.t_roots(B[m is not present in stub
[1mscipy.special._orthogonal.ts_roots(B[m is not present in stub
[1mscipy.special._orthogonal.u_roots(B[m is not present in stub
[1mscipy.special._orthogonal.us_roots(B[m is not present in stub
[1mscipy.special._sf_error.__all__(B[m is not present at runtime
[1mscipy.special._spherical_bessel.__all__(B[m is not present at runtime
[1mscipy.special.cython_special.__all__(B[m is not present at runtime
[1mscipy.stats.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.stats.BootstrapMethod.__init__(B[m is inconsistent, runtime argument "batch" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats.ConfidenceInterval(B[m is not present at runtime
[1mscipy.stats.ECDFResult(B[m is not present at runtime
[1mscipy.stats.EmpiricalDistributionFunction(B[m is not present at runtime
[1mscipy.stats.FitError.__init__(B[m is inconsistent, stub does not have argument "msg"
[1mscipy.stats.FitError.__init__(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.stats.LogRankResult(B[m is not present at runtime
[1mscipy.stats.MonteCarloMethod.__init__(B[m is inconsistent, runtime argument "batch" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats.PermutationMethod.__init__(B[m is inconsistent, runtime argument "batch" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats.alexandergovern(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.alpha(B[m is not present in stub
[1mscipy.stats.anglit(B[m is not present in stub
[1mscipy.stats.ansari(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.ansari(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.ansari(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.arcsine(B[m is not present in stub
[1mscipy.stats.argus(B[m is not present in stub
[1mscipy.stats.bartlett(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.bartlett(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.bernoulli(B[m is not present in stub
[1mscipy.stats.beta(B[m is not present in stub
[1mscipy.stats.betabinom(B[m is not present in stub
[1mscipy.stats.betanbinom(B[m is not present in stub
[1mscipy.stats.betaprime(B[m is not present in stub
[1mscipy.stats.biasedurn(B[m is not present in stub
[1mscipy.stats.binom(B[m is not present in stub
[1mscipy.stats.boltzmann(B[m is not present in stub
[1mscipy.stats.bradford(B[m is not present in stub
[1mscipy.stats.brunnermunzel(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.brunnermunzel(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.burr(B[m is not present in stub
[1mscipy.stats.burr12(B[m is not present in stub
[1mscipy.stats.cauchy(B[m is not present in stub
[1mscipy.stats.chi(B[m is not present in stub
[1mscipy.stats.chi2(B[m is not present in stub
[1mscipy.stats.circmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.circstd(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.circvar(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.combine_pvalues(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.combine_pvalues(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.cosine(B[m is not present in stub
[1mscipy.stats.cramervonmises(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.cramervonmises(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.cramervonmises(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.cramervonmises_2samp(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.cramervonmises_2samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.cramervonmises_2samp(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.crystalball(B[m is not present in stub
[1mscipy.stats.dgamma(B[m is not present in stub
[1mscipy.stats.differential_entropy(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.differential_entropy(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.dlaplace(B[m is not present in stub
[1mscipy.stats.dweibull(B[m is not present in stub
[1mscipy.stats.entropy(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.entropy(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.epps_singleton_2samp(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.epps_singleton_2samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.epps_singleton_2samp(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.erlang(B[m is not present in stub
[1mscipy.stats.expon(B[m is not present in stub
[1mscipy.stats.exponnorm(B[m is not present in stub
[1mscipy.stats.exponpow(B[m is not present in stub
[1mscipy.stats.exponweib(B[m is not present in stub
[1mscipy.stats.f(B[m is not present in stub
[1mscipy.stats.f_oneway(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.f_oneway(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.fatiguelife(B[m is not present in stub
[1mscipy.stats.fisk(B[m is not present in stub
[1mscipy.stats.fligner(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.fligner(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.fligner(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.foldcauchy(B[m is not present in stub
[1mscipy.stats.foldnorm(B[m is not present in stub
[1mscipy.stats.friedmanchisquare(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.friedmanchisquare(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.friedmanchisquare(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.gamma(B[m is not present in stub
[1mscipy.stats.gausshyper(B[m is not present in stub
[1mscipy.stats.genexpon(B[m is not present in stub
[1mscipy.stats.genextreme(B[m is not present in stub
[1mscipy.stats.gengamma(B[m is not present in stub
[1mscipy.stats.genhalflogistic(B[m is not present in stub
[1mscipy.stats.genhyperbolic(B[m is not present in stub
[1mscipy.stats.geninvgauss(B[m is not present in stub
[1mscipy.stats.genlogistic(B[m is not present in stub
[1mscipy.stats.gennorm(B[m is not present in stub
[1mscipy.stats.genpareto(B[m is not present in stub
[1mscipy.stats.geom(B[m is not present in stub
[1mscipy.stats.gibrat(B[m is not present in stub
[1mscipy.stats.gmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.gmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.gompertz(B[m is not present in stub
[1mscipy.stats.gumbel_l(B[m is not present in stub
[1mscipy.stats.gumbel_r(B[m is not present in stub
[1mscipy.stats.halfcauchy(B[m is not present in stub
[1mscipy.stats.halfgennorm(B[m is not present in stub
[1mscipy.stats.halflogistic(B[m is not present in stub
[1mscipy.stats.halfnorm(B[m is not present in stub
[1mscipy.stats.hmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.hmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.hypergeom(B[m is not present in stub
[1mscipy.stats.hypsecant(B[m is not present in stub
[1mscipy.stats.invgamma(B[m is not present in stub
[1mscipy.stats.invgauss(B[m is not present in stub
[1mscipy.stats.invweibull(B[m is not present in stub
[1mscipy.stats.irwinhall(B[m is not present in stub
[1mscipy.stats.jarque_bera(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.jarque_bera(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.jf_skew_t(B[m is not present in stub
[1mscipy.stats.johnsonsb(B[m is not present in stub
[1mscipy.stats.johnsonsu(B[m is not present in stub
[1mscipy.stats.kappa3(B[m is not present in stub
[1mscipy.stats.kappa4(B[m is not present in stub
[1mscipy.stats.kruskal(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.kruskal(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.ks_1samp(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.ks_1samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.ks_1samp(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.ks_2samp(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.ks_2samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.ks_2samp(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.ksone(B[m is not present in stub
[1mscipy.stats.kstat(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.kstat(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.kstatvar(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.kstatvar(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.kstest(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.kstest(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.kstest(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.kstwo(B[m is not present in stub
[1mscipy.stats.kstwobign(B[m is not present in stub
[1mscipy.stats.kurtosis(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.kurtosistest(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.laplace(B[m is not present in stub
[1mscipy.stats.laplace_asymmetric(B[m is not present in stub
[1mscipy.stats.levene(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.levene(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.levene(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.levy(B[m is not present in stub
[1mscipy.stats.levy_l(B[m is not present in stub
[1mscipy.stats.loggamma(B[m is not present in stub
[1mscipy.stats.logistic(B[m is not present in stub
[1mscipy.stats.loglaplace(B[m is not present in stub
[1mscipy.stats.lognorm(B[m is not present in stub
[1mscipy.stats.logser(B[m is not present in stub
[1mscipy.stats.loguniform(B[m is not present in stub
[1mscipy.stats.lomax(B[m is not present in stub
[1mscipy.stats.mannwhitneyu(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.mannwhitneyu(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.maxwell(B[m is not present in stub
[1mscipy.stats.mielke(B[m is not present in stub
[1mscipy.stats.moment(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.mood(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.mood(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.moyal(B[m is not present in stub
[1mscipy.stats.mstats_extras(B[m is not present in stub
[1mscipy.stats.mvn(B[m is not present in stub
[1mscipy.stats.nakagami(B[m is not present in stub
[1mscipy.stats.nbinom(B[m is not present in stub
[1mscipy.stats.ncf(B[m is not present in stub
[1mscipy.stats.nchypergeom_fisher(B[m is not present in stub
[1mscipy.stats.nchypergeom_wallenius(B[m is not present in stub
[1mscipy.stats.nct(B[m is not present in stub
[1mscipy.stats.ncx2(B[m is not present in stub
[1mscipy.stats.nhypergeom(B[m is not present in stub
[1mscipy.stats.norm(B[m is not present in stub
[1mscipy.stats.normaltest(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.norminvgauss(B[m is not present in stub
[1mscipy.stats.pareto(B[m is not present in stub
[1mscipy.stats.pearson3(B[m is not present in stub
[1mscipy.stats.planck(B[m is not present in stub
[1mscipy.stats.pmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.pmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.poisson(B[m is not present in stub
[1mscipy.stats.powerlaw(B[m is not present in stub
[1mscipy.stats.powerlognorm(B[m is not present in stub
[1mscipy.stats.powernorm(B[m is not present in stub
[1mscipy.stats.randint(B[m is not present in stub
[1mscipy.stats.ranksums(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.ranksums(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.ranksums(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.rayleigh(B[m is not present in stub
[1mscipy.stats.rdist(B[m is not present in stub
[1mscipy.stats.recipinvgauss(B[m is not present in stub
[1mscipy.stats.reciprocal(B[m is not present in stub
[1mscipy.stats.rel_breitwigner(B[m is not present in stub
[1mscipy.stats.rice(B[m is not present in stub
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "momtype" is not keyword-only
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "xtol" is not keyword-only
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats.rv_continuous.__init__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "moment_tol" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, stub does not have argument "values"
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "inc" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats.rv_discrete.__init__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "moment_tol" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "values" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "inc" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats.rv_discrete.__new__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats.rv_discrete.cdf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats.rv_discrete.logcdf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats.rv_discrete.logsf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats.rv_discrete.sf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats.rv_frozen(B[m is not present at runtime
[1mscipy.stats.rv_histogram(B[m is not present in stub
[1mscipy.stats.rvs_ratio_uniforms(B[m is not present in stub
[1mscipy.stats.sampling(B[m is not present in stub
[1mscipy.stats.sem(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.semicircular(B[m is not present in stub
[1mscipy.stats.shapiro(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats.shapiro(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.shapiro(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.skellam(B[m is not present in stub
[1mscipy.stats.skew(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.skewcauchy(B[m is not present in stub
[1mscipy.stats.skewnorm(B[m is not present in stub
[1mscipy.stats.skewtest(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.studentized_range(B[m is not present in stub
[1mscipy.stats.t(B[m is not present in stub
[1mscipy.stats.tmax(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.tmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.tmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.tmin(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.trapezoid(B[m is not present in stub
[1mscipy.stats.trapz(B[m is not present in stub
[1mscipy.stats.triang(B[m is not present in stub
[1mscipy.stats.truncexpon(B[m is not present in stub
[1mscipy.stats.truncnorm(B[m is not present in stub
[1mscipy.stats.truncpareto(B[m is not present in stub
[1mscipy.stats.truncweibull_min(B[m is not present in stub
[1mscipy.stats.tsem(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.tsem(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.tstd(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.tstd(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.ttest_1samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.ttest_ind(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.ttest_rel(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.tukeylambda(B[m is not present in stub
[1mscipy.stats.tvar(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.tvar(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.uniform(B[m is not present in stub
[1mscipy.stats.vonmises(B[m is not present in stub
[1mscipy.stats.vonmises_line(B[m is not present in stub
[1mscipy.stats.wald(B[m is not present in stub
[1mscipy.stats.weibull_max(B[m is not present in stub
[1mscipy.stats.weibull_min(B[m is not present in stub
[1mscipy.stats.wilcoxon(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.wilcoxon(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.wrapcauchy(B[m is not present in stub
[1mscipy.stats.yulesimon(B[m is not present in stub
[1mscipy.stats.zipf(B[m is not present in stub
[1mscipy.stats.zipfian(B[m is not present in stub
[1mscipy.stats._axis_nan_policy.too_small_1d_not_omit(B[m is not present in stub
[1mscipy.stats._axis_nan_policy.too_small_1d_omit(B[m is not present in stub
[1mscipy.stats._axis_nan_policy.too_small_nd_not_omit(B[m is not present in stub
[1mscipy.stats._axis_nan_policy.too_small_nd_omit(B[m is not present in stub
[1mscipy.stats._binomtest.__all__(B[m is not present at runtime
[1mscipy.stats._bws_test.__all__(B[m is not present at runtime
[1mscipy.stats._censored_data.__all__(B[m is not present at runtime
[1mscipy.stats._common.__all__(B[m is not present at runtime
[1mscipy.stats._continuous_distns.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.stats._continuous_distns.norm_gen.fit(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.stats._continuous_distns.reciprocal_gen.fit_note(B[m is not present in stub
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, stub does not have argument "histogram"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "a"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "b"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "badvalue"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "longname"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "momtype"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "name"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "seed"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "shapes"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "xtol"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, stub does not have argument "density"
[1mscipy.stats._continuous_distns.rv_histogram.__init__(B[m is inconsistent, stub does not have **kwargs argument "kwargs"
[1mscipy.stats._discrete_distns.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.stats._discrete_distns._nchypergeom_gen.dist(B[m is not present in stub
[1mscipy.stats._discrete_distns._nchypergeom_gen.rvs_name(B[m is not present in stub
[1mscipy.stats._discrete_distns.nchypergeom_fisher_gen.dist(B[m is not present in stub
[1mscipy.stats._discrete_distns.nchypergeom_fisher_gen.rvs_name(B[m is not present in stub
[1mscipy.stats._discrete_distns.nchypergeom_wallenius_gen.dist(B[m is not present in stub
[1mscipy.stats._discrete_distns.nchypergeom_wallenius_gen.rvs_name(B[m is not present in stub
[1mscipy.stats._distn_infrastructure.__all__(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.docdict(B[m is not present in stub
[1mscipy.stats._distn_infrastructure.docdict_discrete(B[m is not present in stub
[1mscipy.stats._distn_infrastructure.docheaders(B[m is not present in stub
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "momtype" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "xtol" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_continuous.__init__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "moment_tol" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, stub does not have argument "values"
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "inc" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__init__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "moment_tol" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "values" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "inc" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.__new__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_discrete.cdf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats._distn_infrastructure.rv_discrete.logcdf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats._distn_infrastructure.rv_discrete.logsf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats._distn_infrastructure.rv_discrete.sf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats._distn_infrastructure.rv_frozen.dist(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.rv_frozen.moment(B[m is inconsistent, runtime argument "order" has a default value but stub argument does not
[1mscipy.stats._distn_infrastructure.rv_generic._nnlf_and_penalty(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.rv_generic._unpack_loc_scale(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, stub does not have argument "a"
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, stub does not have argument "b"
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, runtime argument "moment_tol" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, runtime argument "values" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, runtime argument "inc" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, stub does not have argument "shapes"
[1mscipy.stats._distn_infrastructure.rv_sample.__init__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats._distn_infrastructure.rv_sample.a(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.rv_sample.b(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.rv_sample.generic_moment(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.stats._distn_infrastructure.rv_sample.pk(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.rv_sample.qvals(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.rv_sample.vecentropy(B[m is not present at runtime
[1mscipy.stats._distn_infrastructure.rv_sample.xk(B[m is not present at runtime
[1mscipy.stats._distr_params.__all__(B[m is not present at runtime
[1mscipy.stats._entropy.differential_entropy(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._entropy.differential_entropy(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._entropy.entropy(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._entropy.entropy(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._hypotests.cramervonmises(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._hypotests.cramervonmises(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._hypotests.cramervonmises(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._hypotests.cramervonmises_2samp(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._hypotests.cramervonmises_2samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._hypotests.cramervonmises_2samp(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._hypotests.epps_singleton_2samp(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._hypotests.epps_singleton_2samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._hypotests.epps_singleton_2samp(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._mannwhitneyu.mannwhitneyu(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._mannwhitneyu.mannwhitneyu(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.ansari(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._morestats.ansari(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.ansari(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.bartlett(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.bartlett(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.circmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.circstd(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.circvar(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.fligner(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._morestats.fligner(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.fligner(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.kstat(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.kstat(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.kstatvar(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.kstatvar(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.levene(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._morestats.levene(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.levene(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.mood(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.mood(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.shapiro(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._morestats.shapiro(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.shapiro(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._morestats.wilcoxon(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._morestats.wilcoxon(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._mstats_basic.mquantiles(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats._mstats_extras.hdquantiles(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats._mstats_extras.hdquantiles_sd(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats._mstats_extras.mjci(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats._mstats_extras.mquantiles_cimj(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats._multicomp.DecimalNumber(B[m is not present at runtime
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_alternative"
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_rho"
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_df"
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_std"
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_mean_samples"
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_mean_control"
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_n_samples"
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_n_control"
[1mscipy.stats._multicomp.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_rng"
[1mscipy.stats._multicomp.DunnettResult.__match_args__(B[m variable differs from runtime type ('statistic', 'pvalue', '_alternative', '_rho', '_df', '_std', '_mean_samples', '_mean_control', '_n_samples', '_n_control', '_rng', '_ci', '_ci_cl')
[1mscipy.stats._multicomp.SeedType(B[m is not present at runtime
[1mscipy.stats._multivariate.matrix_normal_frozen.logpdf(B[m is inconsistent, stub argument "x" differs from runtime argument "X"
[1mscipy.stats._multivariate.matrix_normal_frozen.pdf(B[m is inconsistent, stub argument "x" differs from runtime argument "X"
[1mscipy.stats._multivariate.multi_rv_frozen._dist(B[m is not present at runtime
[1mscipy.stats._multivariate.multi_rv_generic.__call__(B[m is not a function
[1mscipy.stats._multivariate.multivariate_normal_frozen.mean(B[m is not present at runtime
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, stub argument "loc" differs from runtime argument "shape"
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, runtime argument "shape" has a default value of type 1, which is incompatible with stub argument type typing.Sequence[float | numpy.integer[Any] | numpy.floating[Any]] | optype.numpy._array.CanArray[(int,), numpy.dtype[numpy.integer[Any] | numpy.floating[Any]]] | numpy.ndarray[Any, numpy.dtype[numpy.integer[Any] | numpy.floating[Any]]] | None. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, stub argument "shape" differs from runtime argument "df"
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, stub argument "shape" differs from runtime argument "size"
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, stub argument "df" differs from runtime argument "random_state"
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, runtime argument "random_state" has a default value of type None, which is incompatible with stub argument type int. This is often caused by overloads failing to account for explicitly passing in the default value.
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, runtime does not have argument "df"
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, runtime does not have argument "size"
[1mscipy.stats._multivariate.multivariate_t_gen.rvs(B[m is inconsistent, runtime does not have argument "random_state"
[1mscipy.stats._multivariate.uniform_direction_frozen.rvs(B[m is inconsistent, runtime argument "size" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats._multivariate.uniform_direction_frozen.rvs(B[m is inconsistent, runtime argument "size" has a default value of None, which is different from stub argument default 1
[1mscipy.stats._multivariate.uniform_direction_gen.rvs(B[m is inconsistent, runtime argument "size" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats._multivariate.uniform_direction_gen.rvs(B[m is inconsistent, runtime argument "size" has a default value of None, which is different from stub argument default 1
[1mscipy.stats._qmc.PoissonDisk.__init__(B[m is inconsistent, runtime does not have argument "l_bounds"
[1mscipy.stats._qmc.PoissonDisk.__init__(B[m is inconsistent, runtime does not have argument "u_bounds"
[1mscipy.stats._qmc_cy.DecimalNumber(B[m is not present at runtime
[1mscipy.stats._qmc_cy.IntNumber(B[m is not present at runtime
[1mscipy.stats._resampling.BootstrapMethod.__init__(B[m is inconsistent, runtime argument "batch" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats._resampling.MonteCarloMethod.__init__(B[m is inconsistent, runtime argument "batch" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats._resampling.PermutationMethod.__init__(B[m is inconsistent, runtime argument "batch" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats._resampling.ResamplingMethod.__init__(B[m is inconsistent, runtime argument "batch" has a default value of type None, which is incompatible with stub argument type int
[1mscipy.stats._resampling.ResamplingMethod.batch(B[m variable differs from runtime type None
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_alternative"
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_rho"
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_df"
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_std"
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_mean_samples"
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_mean_control"
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_n_samples"
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_n_control"
[1mscipy.stats._result_classes.DunnettResult.__init__(B[m is inconsistent, stub does not have argument "_rng"
[1mscipy.stats._result_classes.DunnettResult.__match_args__(B[m variable differs from runtime type ('statistic', 'pvalue', '_alternative', '_rho', '_df', '_std', '_mean_samples', '_mean_control', '_n_samples', '_n_control', '_rng', '_ci', '_ci_cl')
[1mscipy.stats._result_classes.EmpiricalDistributionFunction.__match_args__(B[m variable differs from runtime type ('quantiles', 'probabilities', '_n', '_d', '_sf', '_kind')
[1mscipy.stats._sensitivity_analysis.SobolResult.__init__(B[m is inconsistent, stub does not have argument "_indices_method"
[1mscipy.stats._sensitivity_analysis.SobolResult.__init__(B[m is inconsistent, stub does not have argument "_f_A"
[1mscipy.stats._sensitivity_analysis.SobolResult.__init__(B[m is inconsistent, stub does not have argument "_f_B"
[1mscipy.stats._sensitivity_analysis.SobolResult.__init__(B[m is inconsistent, stub does not have argument "_f_AB"
[1mscipy.stats._sensitivity_analysis.SobolResult.__match_args__(B[m variable differs from runtime type ('first_order', 'total_order', '_indices_method', '_f_A', '_f_B', '_f_AB', '_A', '_B', '_AB', '_bootstrap_result')
[1mscipy.stats._sobol.IntNumber(B[m is not present at runtime
[1mscipy.stats._sobol.get_poly_vinit(B[m is not present in stub
[1mscipy.stats._stats_mstats_common._find_repeats(B[m is not present in stub
[1mscipy.stats._stats_py.PearsonRResultBase.__getnewargs_ex__(B[m is not present in stub
[1mscipy.stats._stats_py.PearsonRResultBase.__init__(B[m is inconsistent, stub does not have argument "statistic"
[1mscipy.stats._stats_py.PearsonRResultBase.__init__(B[m is inconsistent, stub does not have argument "pvalue"
[1mscipy.stats._stats_py.PearsonRResultBase._make(B[m is not present at runtime
[1mscipy.stats._stats_py.PearsonRResultBase._replace(B[m is not present at runtime
[1mscipy.stats._stats_py.QuantileTestResult.__init__(B[m is inconsistent, stub does not have argument "_alternative"
[1mscipy.stats._stats_py.QuantileTestResult.__init__(B[m is inconsistent, stub does not have argument "_x"
[1mscipy.stats._stats_py.QuantileTestResult.__init__(B[m is inconsistent, stub does not have argument "_p"
[1mscipy.stats._stats_py.QuantileTestResult.__match_args__(B[m variable differs from runtime type ('statistic', 'statistic_type', 'pvalue', '_alternative', '_x', '_p')
[1mscipy.stats._stats_py.TtestResultBase.__getnewargs_ex__(B[m is not present in stub
[1mscipy.stats._stats_py.TtestResultBase.__init__(B[m is inconsistent, stub does not have argument "statistic"
[1mscipy.stats._stats_py.TtestResultBase.__init__(B[m is inconsistent, stub does not have argument "pvalue"
[1mscipy.stats._stats_py.TtestResultBase._make(B[m is not present at runtime
[1mscipy.stats._stats_py.TtestResultBase._replace(B[m is not present at runtime
[1mscipy.stats._stats_py._SimpleChi2.cdf(B[m is not present at runtime
[1mscipy.stats._stats_py._SimpleNormal.isf(B[m is not present at runtime
[1mscipy.stats._stats_py.alexandergovern(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.brunnermunzel(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._stats_py.brunnermunzel(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.combine_pvalues(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.combine_pvalues(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.f_oneway(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.f_oneway(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.friedmanchisquare(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._stats_py.friedmanchisquare(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.friedmanchisquare(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.gmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.gmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.hmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.hmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.jarque_bera(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.jarque_bera(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.kruskal(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._stats_py.kruskal(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.ks_1samp(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._stats_py.ks_1samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.ks_1samp(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.ks_2samp(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._stats_py.ks_2samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.ks_2samp(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.kstest(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._stats_py.kstest(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.kstest(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.kurtosis(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.kurtosistest(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.moment(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.normaltest(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.pmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.pmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.ranksums(B[m is inconsistent, stub does not have argument "axis"
[1mscipy.stats._stats_py.ranksums(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.ranksums(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.sem(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.skew(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.skewtest(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.tmax(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.tmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.tmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.tmin(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.tsem(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.tsem(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.tstd(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.tstd(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_py.ttest_1samp(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.ttest_ind(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.ttest_rel(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.tvar(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats._stats_py.tvar(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats._stats_pythran.__pythran__(B[m is not present in stub
[1mscipy.stats._survival.EmpiricalDistributionFunction.__match_args__(B[m variable differs from runtime type ('quantiles', 'probabilities', '_n', '_d', '_sf', '_kind')
[1mscipy.stats._warnings_errors.FitError.__init__(B[m is inconsistent, stub does not have argument "msg"
[1mscipy.stats._warnings_errors.FitError.__init__(B[m is inconsistent, runtime does not have *args argument "args"
[1mscipy.stats.distributions.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.stats.distributions.entropy(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.distributions.entropy(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "momtype" is not keyword-only
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "xtol" is not keyword-only
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats.distributions.rv_continuous.__init__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "moment_tol" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, stub does not have argument "values"
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "inc" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__init__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "a" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "b" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "name" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "badvalue" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "moment_tol" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "values" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "inc" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "longname" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "shapes" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.__new__(B[m is inconsistent, runtime argument "seed" is not keyword-only
[1mscipy.stats.distributions.rv_discrete.cdf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats.distributions.rv_discrete.logcdf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats.distributions.rv_discrete.logsf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats.distributions.rv_discrete.sf(B[m is inconsistent, stub argument "x" differs from runtime argument "k"
[1mscipy.stats.distributions.rv_frozen.dist(B[m is not present at runtime
[1mscipy.stats.distributions.rv_frozen.moment(B[m is inconsistent, runtime argument "order" has a default value but stub argument does not
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, stub does not have argument "histogram"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, stub does not have *args argument "args"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "a"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "b"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "badvalue"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "longname"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "momtype"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "name"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "seed"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "shapes"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, runtime does not have argument "xtol"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, stub does not have argument "density"
[1mscipy.stats.distributions.rv_histogram.__init__(B[m is inconsistent, stub does not have **kwargs argument "kwargs"
[1mscipy.stats.mstats.BrunnerMunzelResult(B[m is not present at runtime
[1mscipy.stats.mstats.DescribeResult(B[m is not present at runtime
[1mscipy.stats.mstats.F_onewayResult(B[m is not present at runtime
[1mscipy.stats.mstats.FriedmanchisquareResult(B[m is not present at runtime
[1mscipy.stats.mstats.KruskalResult(B[m is not present at runtime
[1mscipy.stats.mstats.KurtosistestResult(B[m is not present at runtime
[1mscipy.stats.mstats.MannwhitneyuResult(B[m is not present at runtime
[1mscipy.stats.mstats.ModeResult(B[m is not present at runtime
[1mscipy.stats.mstats.NormaltestResult(B[m is not present at runtime
[1mscipy.stats.mstats.PointbiserialrResult(B[m is not present at runtime
[1mscipy.stats.mstats.SenSeasonalSlopesResult(B[m is not present at runtime
[1mscipy.stats.mstats.SkewtestResult(B[m is not present at runtime
[1mscipy.stats.mstats.Ttest_1sampResult(B[m is not present at runtime
[1mscipy.stats.mstats.Ttest_indResult(B[m is not present at runtime
[1mscipy.stats.mstats.Ttest_relResult(B[m is not present at runtime
[1mscipy.stats.mstats.beta(B[m is not present at runtime
[1mscipy.stats.mstats.binom(B[m is not present at runtime
[1mscipy.stats.mstats.gmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.mstats.gmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.mstats.hdquantiles(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats.mstats.hdquantiles_sd(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats.mstats.hmean(B[m is inconsistent, stub does not have argument "keepdims"
[1mscipy.stats.mstats.hmean(B[m is inconsistent, stub does not have argument "nan_policy"
[1mscipy.stats.mstats.mjci(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats.mstats.mquantiles(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats.mstats.mquantiles_cimj(B[m is inconsistent, runtime argument "prob" has a default value of [0.25, 0.5, 0.75], which is different from stub argument default (0.25, 0.5, 0.75)
[1mscipy.stats.mstats.norm(B[m is not present at runtime
[1mscipy.stats.mstats.stde_median(B[m is not present at runtime
[1mscipy.stats.mstats.t(B[m is not present at runtime
[1mscipy.stats.mstats.trim1(B[m is not present at runtime
[1mscipy.stats.mstats.trimdoc(B[m is not present at runtime
[1mscipy.stats.mstats_extras.compare_medians_ms(B[m is not present in stub
[1mscipy.stats.mstats_extras.hdmedian(B[m is not present in stub
[1mscipy.stats.mstats_extras.hdquantiles(B[m is not present in stub
[1mscipy.stats.mstats_extras.hdquantiles_sd(B[m is not present in stub
[1mscipy.stats.mstats_extras.idealfourths(B[m is not present in stub
[1mscipy.stats.mstats_extras.median_cihs(B[m is not present in stub
[1mscipy.stats.mstats_extras.mjci(B[m is not present in stub
[1mscipy.stats.mstats_extras.mquantiles_cimj(B[m is not present in stub
[1mscipy.stats.mstats_extras.rsh(B[m is not present in stub
[1mscipy.stats.mstats_extras.trimmed_mean_ci(B[m is not present in stub
[1mscipy.stats.qmc.PoissonDisk.__init__(B[m is inconsistent, runtime does not have argument "l_bounds"
[1mscipy.stats.qmc.PoissonDisk.__init__(B[m is inconsistent, runtime does not have argument "u_bounds"
[1mscipy.stats.sampling.__all__(B[m names exported from the stub do not correspond to the names exported at runtime. This is probably due to things being missing from the stub or an inaccurate `__all__` in the stub
[1mscipy.stats.sampling.DiscreteAliasUrn(B[m is not present in stub
[1mscipy.stats.sampling.DiscreteGuideTable(B[m is not present in stub
[1mscipy.stats.sampling.NumericalInverseHermite(B[m is not present in stub
[1mscipy.stats.sampling.NumericalInversePolynomial(B[m is not present in stub
[1mscipy.stats.sampling.SimpleRatioUniforms(B[m is not present in stub
[1mscipy.stats.sampling.TransformedDensityRejection(B[m is not present in stub
[1mscipy.stats.sampling.UNURANError(B[m is not present in stub
[1mscipy._lib.cobyqa.framework(B[m failed to find stubs
[1mscipy._lib.cobyqa.main(B[m failed to find stubs
[1mscipy._lib.cobyqa.models(B[m failed to find stubs
[1mscipy._lib.cobyqa.problem(B[m failed to find stubs
[1mscipy._lib.cobyqa.settings(B[m failed to find stubs
[1mscipy._lib.cobyqa.subsolvers(B[m failed to find stubs
[1mscipy._lib.cobyqa.subsolvers.geometry(B[m failed to find stubs
[1mscipy._lib.cobyqa.subsolvers.optim(B[m failed to find stubs
[1mscipy._lib.cobyqa.utils(B[m failed to find stubs
[1mscipy._lib.cobyqa.utils.exceptions(B[m failed to find stubs
[1mscipy._lib.cobyqa.utils.math(B[m failed to find stubs
[1mscipy._lib.cobyqa.utils.versions(B[m failed to find stubs
[1mscipy.fftpack.convolve(B[m failed to find stubs
[1mscipy.linalg.cython_blas(B[m failed to find stubs
[1mscipy.linalg.cython_lapack(B[m failed to find stubs
[1mscipy.optimize._lsq.givens_elimination(B[m failed to find stubs
[1mscipy.stats._levy_stable.levyst(B[m failed to find stubs
[1mscipy.version(B[m failed to find stubs
